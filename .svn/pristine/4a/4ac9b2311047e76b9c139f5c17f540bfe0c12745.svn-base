package kr.or.ddit.yguniv.mypage.controller;

import java.security.Principal;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.yguniv.mypage.service.MypageService;
import kr.or.ddit.yguniv.vo.PersonVO;
import lombok.extern.java.Log;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("mypage")
public class MypageController {
	
	public static final String MODELNAME = "my";
	
	@Autowired
	public MypageService service; 
	
	@ModelAttribute(MODELNAME)
	public PersonVO person() {
		return new PersonVO();
	}
	

	// 마이페이지 조회 
	@GetMapping("selectMypage/{id}")
	public String SelectMypage(
			Principal pricipal
			,Model model
			,@PathVariable String id
			
			)throws IllegalAccessException{
		
		String personId = pricipal.getName();
		if(personId == null || personId.isEmpty()) {
			return "redirect:";// 학생이 존재하지 않을 때에는 화면 
		}
		if(!personId.equals(id)) {
			return "redirect:";// 학생이 존재하지 않을 때에는 화면 
		}
		 PersonVO person = service.selectPerson(id);
		    model.addAttribute("my", person);

		 model.addAttribute("my",service.selectPerson(id));
		

		return "mypage/myPageForm";
	}
	
	// 마이페이지 수정폼 
	// 하려면 비밀번호 인증해야함 
	
	@GetMapping("{id}/UpdateMyPage")
	public String updateMypage(
			@PathVariable String id,
			Model model,
			@ModelAttribute(MODELNAME) PersonVO person
			) {
		model.addAttribute(MODELNAME,service.selectPerson(id));
		return "mypage/myPageEdit";
	}
	
	
	
	@PostMapping("{id}/UpdateMyPage")
	public String updateMypage(
	        @ModelAttribute(MODELNAME) PersonVO person,
	        BindingResult error,
	        @RequestParam("pswd") String pswd,
	        @RequestParam("confirmPswd") String confirmPswd,
	        @PathVariable("id") String id,
	        RedirectAttributes redirectAttributes
	) {
	    log.info("수정 요청 시작 : ID {}", id);
	    log.info("수정 데이터 : person {}", person);

	    if (!pswd.equals(confirmPswd)) {
	        log.info("비밀번호 불일치: pswd {}, confirmPswd {}", pswd, confirmPswd);
	        redirectAttributes.addFlashAttribute("errorMessage", "비밀번호와 비밀번호 확인이 일치하지 않습니다.");
	        redirectAttributes.addFlashAttribute(MODELNAME, person);
	        return "redirect:/mypage/" + id + "/UpdateMyPage";
	    }

	    if (error.hasErrors()) {
	        log.error("BindingResult 에러: {}", error);
	        redirectAttributes.addFlashAttribute("errorMessage", "입력값에 오류가 있습니다.");
	        redirectAttributes.addFlashAttribute(MODELNAME, person);
	        return "redirect:/mypage/" + id + "/UpdateMyPage";
	    }

	    try {
	        log.info("수정 작업 진행 중...");
	        person.setPswd(pswd);
	        service.updatePerson(person);
	        log.info("수정 작업 완료: person {}", person);
	        redirectAttributes.addFlashAttribute("successMessage", "정보가 성공적으로 수정되었습니다.");
	    } catch (Exception e) {
	        log.error("수정 실패: {}", e.getMessage());
	        redirectAttributes.addFlashAttribute("errorMessage", "수정 중 예상치 못한 오류가 발생했습니다. 다시 시도해주세요.");
	    }

	    return "redirect:/mypage/selectMypage/" + id;
	}


	
	 // 비밀번호 인증 폼
    @GetMapping("{id}/auth")
    public String authenticateForm(
            @PathVariable String id,
            Model model
    ) {
        model.addAttribute("id", id);
        return "mypage/authForm";
    }

    @PostMapping("{id}/auth")
    public String authenticateUser(
    	
            @PathVariable String id,
            @RequestParam("pswd") String pswd,
            RedirectAttributes redirectAttributes
    ) {
        try {
            PersonVO authenticatedPerson = service.authenticateUser(id, pswd);
            redirectAttributes.addFlashAttribute(MODELNAME, authenticatedPerson);
            return "redirect:/mypage/" + id + "/UpdateMyPage";
        } catch (IllegalArgumentException e) {
            redirectAttributes.addFlashAttribute("errorMessage", "비밀번호가 일치하지 않습니다.");
            return "redirect:/mypage/" + id + "/auth";
        }
    }


}