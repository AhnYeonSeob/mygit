package kr.or.ddit.yguniv.vo;

import java.io.IOException;
import java.io.Serializable;
import java.util.Base64;
import java.util.List;

import javax.validation.constraints.Email;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

import org.apache.commons.lang3.builder.ToStringExclude;
import org.springframework.web.multipart.MultipartFile;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@Data
@ToString
@EqualsAndHashCode(of = "id")
public class PersonVO implements Serializable{

	@NotBlank
	@Size(min = 10, max = 10)
	private String id;

	@NotBlank
	@ToString.Exclude
	private transient String pswd; //비밀번호 

	@NotBlank
	private String nm;//이름 

	@NotBlank
	@Size(max = 8)
	private String brdt; // 생년월일 

	@NotBlank
	@Size(max=2)
	private String sexdstnCd; // 성별코드 

	@NotBlank
	private String zip; // 집주소

	private String rdnmadr; // 도로명 주소 

	@NotBlank
	private String daddr; // 상세주소

	@NotBlank
	@Pattern(regexp = "\\d{3}-\\d{3,4}-\\d{4}")
	private String mbtlnum; // 휴대폰번호 

	@NotBlank
	@Email
	private String eml;// 이메일

	@NotBlank
	private String emlRcptnAgreYn; //이메일수신동의여부

	@NotBlank
	private String smsRcptnAgreYn; //sms 수신 동의 여부

	@NotBlank
	private String crtfcMnCd; // 인증수단 코드

	@NotBlank
	private String lastConectDe; // 최종 접속 일자 

	@Min(0)
	@NotNull
	private int pswdFailrCo; // 비밀번호 실패 횟수

	
	// 증명사진 
	// 회원 프로필 관리용 프러퍼티 (BLOB - Binary Large OBject)
	@ToString.Exclude
	private byte[] proflPhoto; // 데이터베이스 지원
	private MultipartFile proflImage; // 클라이언트 업로드 파일 지원

	public void setProflImage(MultipartFile proflImage) throws IOException {
		if (proflImage == null || proflImage.isEmpty())
			return;

		this.proflImage = proflImage;
		this.proflPhoto = proflImage.getBytes(); // 있으면 byte 로 바뀜
	}

	public String getBase64Img() {
		if (proflPhoto != null && proflPhoto.length > 0) {
			return Base64.getEncoder().encodeToString(proflPhoto);
		} else {
			return null;
		}

	}
	
	
	@ToString.Exclude
	private AtchFileVO atchFile;
	
	@ToString.Exclude
	private List<ProfessorVO> professor;
	
	@ToString.Exclude
	private List<StudentVO> student;
	
	@ToString.Exclude
	private List<AdminVO> admin;
	
	@ToString.Exclude
	private List<EmployeeVO> employee; 
	
	
	

}