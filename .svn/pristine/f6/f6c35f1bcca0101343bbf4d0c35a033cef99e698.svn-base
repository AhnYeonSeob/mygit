/**
 * 
 */

const testInsertBtn = document.querySelector("#testInsertBtn")


document.addEventListener("DOMContentLoaded", () => {
	document.querySelector('input[name="testOnlineYn"][value="Y"]').addEventListener('change', function() {
		document.querySelector('input[name="croomNm"]').disabled = this.checked;
	});

	document.querySelector('input[name="testOnlineYn"][value="N"]').addEventListener('change', function() {
		document.querySelector('input[name="croomNm"]').disabled = false;
	});

})

async function insertForm() {
    const lectNo = document.querySelector("#lectNo").value;
    const contextPath = document.querySelector("#contextPath").value;
    const url = `${contextPath}/test/new/test/${lectNo}`;
    const getData = getTestInfoAndDateTime();

    console.log(getData);
    console.log(contextPath);

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(getData),
        });

        if (response.ok) {
            const data = await response.json();
            console.log(data.testNo);
            insertQuestion(data.testNo);
        } else {
            const errorData = await response.json();
            swal({
                title: "추가 실패",
                text: errorData.message || "알 수 없는 오류가 발생했습니다.",
                icon: "error",
                button: "확인",
            });
        }
    } catch (err) {
        console.error(err);
        swal({
            title: "추가 실패",
            text: err.message || "알 수 없는 오류가 발생했습니다.",
            icon: "error",
            button: "확인",
        });
    }
}

async function insertQuestion(testNo) {
    const contextPath = document.querySelector("#contextPath").value;
    const qurl = `${contextPath}/test/question`;
    const getData = getQuestionData();

    // `testNo`를 getData에 포함
    getData.testNo = testNo;

    console.log(getData);

    try {
        const response = await fetch(qurl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: getData, // JSON 데이터로 변환하여 전송
        });

        if (response.ok) {
            console.log("asasdasdasdasddasds");

            swal({
                title: "추가완료",
                text: "시험이 성공적으로 추가되었습니다",
                icon: "success",
                button: "확인",
            }).then(() => {
                location.href = `${contextPath}/test/${testNo}`;
            });
        } else {
            const errorData = await response.json();
            swal({
                title: "추가실패",
                text: errorData.message || "알 수 없는 오류가 발생했습니다.",
                icon: "error",
                button: "확인",
            });
        }
    } catch (err) {
        console.error(err);
        swal({
            title: "추가실패",
            text: err.message || "알 수 없는 오류가 발생했습니다.",
            icon: "error",
            button: "확인",
        });
    }
}


function getTestInfoAndDateTime() {
	const testInfo = {
		lectNo: document.querySelector("#lectNo")?.value,
		croomCd: document.querySelector('input[name="croomNm"]')?.value,
		testSe: document.querySelector('select[name="testSe"]').value,
		testOnlineYn: document.querySelector('input[name="testOnlineYn"]:checked')?.value,
		testSchdl: document.querySelector('#dateDiv input[type="date"]').value,
		testDt: document.querySelector('.date-time-section input[type="time"]:first-of-type').value,
		testEt: document.querySelector('.date-time-section input[type="time"]:last-of-type').value
	};
	console.log(testInfo)

	return testInfo;
}

function autoResize(textarea) {
	textarea.style.height = 'auto';
	textarea.style.height = textarea.scrollHeight + 'px';
}

document.querySelectorAll('.option textarea').forEach(textarea => {
	textarea.addEventListener('input', function() {
		autoResize(this);
	});
});
/**
 * 
window.revFam = function(pBtn) {
    // 가장 바깥쪽의 div.question-section을 찾아서 삭제
    const questionBox = pBtn.closest('.question-header');
    if (questionBox) {
        // 요소를 DOM에서 완전히 제거
        questionBox.parentNode.removeChild(questionBox);
        // 또는 아래 방법도 가능
        // questionBox.remove();
    }
};
 */
window.revFam = function(pBtn) {
    // 가장 바깥쪽의 draggable-question div를 찾아서 삭제
    const questionBox = pBtn.closest('.draggable-question');
    if (questionBox) {
        questionBox.remove();
        updateQuestionNumbers(); // 문제 번호 다시 매기기
    }
};


function getQuestionData() {
    const questions = document.querySelectorAll('.options');
    const questionsData = [];

    questions.forEach((question, index) => {
        // 기본 question 데이터 생성
        const questionData = {
            queNo: `Q${(index + 1).toString().padStart(3, '0')}`, // 문제 번호
            queDescr: question.querySelector('#queDescr').value, // 문제 설명
            queScore: question.querySelector('#scorebox').value, // 문제 배점
            queAnswer: question.querySelector('input[placeholder="정답"]')?.value, // 정답
            queType: getQuestionType(question) // 문제 유형
        };

        // 객관식 또는 주관식일 경우에만 answerVO 생성
        if (questionData.queType === '객관식') {
            questionData.answerVO = Array.from(question.querySelectorAll('textarea')).map((textarea, idx) => ({
                anchNo: `A${(1).toString().padStart(3, '0')}`,
                anchDescr: textarea.value, // 답변 내용
            }));

            // 정답 표시된 경우 isCorrect 업데이트
            const correctAnswerIndex = parseInt(questionData.queAnswer, 10) - 1;
            if (!isNaN(correctAnswerIndex) && questionData.answerVO[correctAnswerIndex]) {
      //          questionData.answerVO[correctAnswerIndex].isCorrect = true;
            }
        } else if (questionData.queType === '주관식') {
            questionData.answerVO = [
                {
                    anchNo: `A${(1).toString().padStart(3, '0')}`,
                    anchDescr: question.querySelector('input[name="q1"]').value // 주관식 답변 필드
                }
            ];
        } else{
	questionData.answerVO = [
                {
                    anchNo: `A${(1).toString().padStart(3, '0')}`,
                    anchDescr: question.querySelector('input[name="q1"]').value // 서술형 답변 필드
                }
            ];
	}

        // 서술형은 answerVO를 추가하지 않음
        questionsData.push(questionData);
    });

    console.log(JSON.stringify(questionsData, null, 2));
    return JSON.stringify(questionsData, null, 2);
}

function getQuestionType(question) {
    if (question.querySelectorAll('textarea').length > 0) {
        return '객관식';
    } else if (question.querySelector('input[name="q1"]')) {
        return '주관식';
    } else {
        return '서술형';
    }
}
















