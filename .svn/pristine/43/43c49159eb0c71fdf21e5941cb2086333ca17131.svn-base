/**
 * 
테스트 알림 전송용도
//	await sendTestNotification();
async function sendTestNotification() {
	const userId = document.querySelector("#userId").value;
	const contextPath = document.querySelector("#contextPath").value;
	fetch(`${contextPath}/api/notifications/test/${userId}`, { method: 'POST' })
		.then(response => response.json())
		.then(data => console.log('테스트 알림 전송됨:', data))
		.catch(error => console.error('테스트 알림 전송 실패:', error));
}
 */

document.addEventListener("DOMContentLoaded", async () => {
	//const id = 'prof123';

	const userId = document.querySelector("#userId").value;
	const contextPath = document.querySelector("#contextPath").value;
	await load(userId, contextPath);

});


// 1. 로그인 하지 않았을 때 기존에 저장된 알림은 그냥 표시만 
//2. 새로 로그인 한 후에 전송되는 로그인은 알림표시
//
//
//
//
function load(userId, contextPath) {
	return new Promise((resolve, reject) => {
		const eventSource = new EventSource(`${contextPath}/api/notifications/stream/${userId}`);

		eventSource.onopen = function(event) {
			console.log('SSE 연결 수립됨');
	//		console.log(event)
			
			resolve(eventSource);
		};

		eventSource.onmessage = function(event) {
	//		console.log('Received raw data:', event.data);
			const notification = JSON.parse(event.data);
	//		console.log('Parsed notification:', notification);
			if (notification.list) {
	//			console.log('Notification list:', notification.list);
			}
			displayNotification(notification);
		};

		eventSource.onerror = function(error) {
			console.error('SSE 에러:', error);
			eventSource.close();
			reject(error);
		};
	});
}
/**
현재 순서. 
1. load에서 notiController로 요청을 보냄.
2. getMethod 도착. service로 이동
3. service.createEmitter 도착. 연결 수립 후 map에 저장.
4. 바로 sendNotifi 실행
5. db에서 id와 일치하는 알림을 모두 가져감
6. js의 onmessage 에서 받음
7. display에서 기존 목록을 받고 ui를 활성화함
8.

구상해야 하는것


 */ 





async function displayNotification(notification) {
    const notificationsUl = document.querySelector('.notifications');
    const contextPath = document.querySelector("#contextPath").value;

    if (notification.list && notification.list.length > 0) {
        // 알림 목록을 받았을 때만 기존 알림을 모두 지우고 새로 표시
        const existingItems = notificationsUl.querySelectorAll('li:not(.dropdown-header):not(:first-child)');
        existingItems.forEach(item => item.remove());

        notification.list.forEach(noti => {
            const li = createNotificationListItem(noti, contextPath);
            notificationsUl.appendChild(li);
        });

        updateNotificationCount(notification.list.length);
    } else if (notification.one && notification.one != null) {

        // '새로운 알림이 없습니다' 메시지가 있다면 제거
        const noNotificationItem = notificationsUl.querySelector('li:not(.dropdown-header)');
        if (noNotificationItem && noNotificationItem.textContent === '새로운 알림이 없습니다.') {
            noNotificationItem.remove();
        }

        // 알림 개수 업데이트
        const currentCount = notificationsUl.querySelectorAll('li:not(.dropdown-header)').length;
        updateNotificationCount(currentCount);
		
        // 단건 알림 처리: 기존 알림을 유지하면서 새 알림을 맨 위에 추가
        const li = createNotificationListItem(notification.one, contextPath);
        notificationsUl.appendChild(li);
		
		
        // 새 알림 팝업 표시
        showNewNotificationPopup(notification.one);

    } else if (notificationsUl.querySelectorAll('li:not(.dropdown-header)').length === 0) {
        // 알림이 하나도 없는 경우에만 '새로운 알림이 없습니다' 메시지 표시
        const li = document.createElement('li');
        li.className = 'notification-item';
        li.style = "padding: 10px; text-align: center; color: #6c757d;";
        li.textContent = '새로운 알림이 없습니다.';
        notificationsUl.appendChild(li);
        updateNotificationCount(0);
    }
}


function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleString('ko-KR', { 
        year: 'numeric', 
        month: '2-digit', 
        day: '2-digit', 
        hour: '2-digit', 
        minute: '2-digit' 
    });
}

function updateNotificationCount(count) {
    const badge = document.querySelector('.nav-link.nav-icon .badge');
    if (badge) {
        badge.textContent = count;
    }
}


async function updateOneReadNotfication(notiNo){
	//단건 업데이트 
	
	const contextPath = document.querySelector("#contextPath").value;
	fetch(`${contextPath}/api/notifications/test/${notiNo}`, { method: 'get' })

}

//전체 읽음 표시로 전체 제거
async function updateAllReadNotfication() {
    const contextPath = document.querySelector("#contextPath").value;
    try {
        const response = await fetch(`${contextPath}/api/notifications/test/all`, { method: 'get' });
        if (response.ok) {
            const result = await response.json();
            console.log(result.message);
            
            // UI 직접 업데이트
            updateNotificationUI();
        } else {
            console.error('알림 처리 실패');
        }
    } catch (error) {
        console.error('알림 처리 중 오류 발생:', error);
    }
}

function updateNotificationUI() {
    const notificationsUl = document.querySelector('.notifications');
    // 기존 알림 항목들 제거 (헤더는 유지)
    const existingItems = notificationsUl.querySelectorAll('li:not(.dropdown-header)');
    existingItems.forEach(item => item.remove());

    // "모든 알림을 읽었습니다" 메시지 추가
    const li = document.createElement('li');
    li.className = 'notification-item';
    li.innerHTML = `
        <i class="bi bi-check-circle text-success"></i>
        <div>
            <h4>알림</h4>
            <p>모든 알림을 읽었습니다.</p>
        </div>
    `;
    notificationsUl.appendChild(li);

    // 알림 카운트 업데이트
    updateNotificationCount(0);
}

let toastContainer;

function showNewNotificationPopup(noti) {
    if (!toastContainer) {
    toastContainer = document.createElement('div');
    toastContainer.className = 'toast-container position-fixed end-0 p-3';
    toastContainer.style.cssText = `
        z-index: 9999;
        bottom: 70px; 
    `;
    document.body.appendChild(toastContainer);
}
    let direct = "바로가기";
    let dataUrl = noti.notiUrl;
    if(dataUrl == " "){direct = "메인화면으로"}
const toastHtml = `
    <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header" style="background-color:#003399; color: white;">
            <i class="bi bi-bell me-2"></i>
            <strong class="me-auto">${noti.notiHead || '알림'}</strong>
            <small>방금 전</small>
            <button type="button" data-bs-dismiss="toast"  class="btn-close btn-close-white" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            ${noti.notiCn || '새 알림이 있습니다.'}
            <a href="${contextPath}/${noti.notiUrl}" onclick="updateOneReadNotfication(${noti.notiNo})" style="font-size: 0.8rem;">${direct}</a>
        </div>
    </div>
`;

//	background-color: #003399; 
//	color: white;

    toastContainer.insertAdjacentHTML('beforeend', toastHtml);
    const toast = toastContainer.lastElementChild;

    const bsToast = new bootstrap.Toast(toast, {
        autohide: true,
        delay: 3000
    });
    bsToast.show();

    toast.addEventListener('hidden.bs.toast', () => {
        toast.remove();
        if (toastContainer.children.length === 0) {
            toastContainer.remove();
            toastContainer = null;
        }
    });
}



function createNotificationListItem(noti, contextPath) {
    const li = document.createElement('li');
    li.className = 'notification-item';
    li.style = "padding: 10px; border-bottom: 1px solid #e9ecef;";
    
    let direct = "바로가기";
    let iconClass = 'bi-exclamation-circle text-warning';
    if (noti.notiCd === 'NO01') iconClass = 'bi-check-circle text-success';
    if (noti.notiCd === 'NO02') iconClass = 'bi-info-circle text-primary';
    if (noti.notiCd === 'NO04') iconClass = 'bi-exclamation-diamond-fill text-danger';
    
    let dataUrl = noti.notiUrl;
    if(dataUrl == " "){direct = "메인화면으로"}

    li.innerHTML = `
        <div style="display: flex; align-items: center;">
            <div style="display: flex; justify-content: center; align-items: center; width: 60px; height: 60px;">
                <i class="bi ${iconClass}" style="font-size: 1.5rem;"></i>
            </div>
            <div style="flex: 1;">
                <h6 style="margin: 0; font-weight: bold;">${noti.notiHead}</h6>
                <p style="margin: 5px 0; font-size: 0.9rem;">${noti.notiCn}</p>
                <p style="margin: 0; font-size: 0.8rem; color: #6c757d;">${noti.sendNm}</p>
                <p style="margin: 0; font-size: 0.8rem; color: #6c757d;">${noti.notiDate}</p>
                <a href="${contextPath}/${noti.notiUrl}" onclick="updateOneReadNotfication(${noti.notiNo})" style="font-size: 0.8rem;">${direct}</a>
            </div>
        </div>
    `;
    
    return li;
}












