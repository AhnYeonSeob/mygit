/**
 * 채팅방 WebSocket 및 이전 대화 기록 관리
	날짜가 다를 때 첫번째 메시지에는 날짜가 나와야한다.
 */
document.addEventListener("DOMContentLoaded", () => {
    const messageContainer = document.getElementById("message-container");
    const messageInput = document.getElementById("message-input");
    const sendButton = document.getElementById("send-btn");

    const taskNo = messageContainer.dataset.taskNo;
    const teamCd = messageContainer.dataset.teamCd;
    const contextPath = messageContainer.dataset.path;
    const userId = messageContainer.dataset.user;
	// 지난 기록 가져오는 url
    const chatUrl = `${contextPath}/projectChatMessage/${taskNo}/${teamCd}`; // 이전 대화 내역 조회 API URL
    
	// 웹소켓 연결 url
	const wsUrl = `${contextPath}/ws-chat`;

    let stompClient;

    // WebSocket 및 STOMP 설정
    const connectWebSocket = () => {
        const socket = new SockJS(wsUrl);
        stompClient = Stomp.over(socket);

        stompClient.connect({}, () => {
            console.log("WebSocket 연결 성공");

            // 채팅방 구독
            stompClient.subscribe("/topic/chat", (messageOutput) => {
                const message = JSON.parse(messageOutput.body);
				console.log("수신된 메시지:===============>", message); // 디버깅용 콘솔 출력
                displayMessage(message);
            });

            // 입장 메시지 전송
            sendJoinMessage();
        }, (error) => {
            console.error("WebSocket 연결 실패:", error);
            swal("오류", "WebSocket 연결에 문제가 발생했습니다. 10초 후 다시 시도합니다.", "error");

            // 재연결 시도
            setTimeout(connectWebSocket, 10000);
        });
    };
    
	// 전역 변수 선언
	let lastMessageDate = null;
	 // 메시지 화면에 표시
    const displayMessage = (message) => {
	    const messageDate = new Date(message.projectchatmessageDt).toLocaleDateString(); // 메시지의 날짜
	    const currentDate = new Date().toLocaleDateString(); // 현재 날짜
		// person 객체가 존재하고 nm 값이 있으면 이름 출력
    	const senderName = message.person?.nm || "알 수 없음";
		
	    // 날짜가 달라질 경우 날짜 표시 추가
	    if (lastMessageDate !== messageDate) {
	        const dateElement = document.createElement("div");
	        dateElement.classList.add("date-divider");
	        dateElement.textContent = messageDate === currentDate ? "오늘" : messageDate; // 오늘이면 "오늘"로 표시
	        messageContainer.appendChild(dateElement);
	        lastMessageDate = messageDate; // 마지막 날짜 업데이트
	    }
	
	    const messageElement = document.createElement("div");
	    messageElement.classList.add("message");
	
	    // 발신자와 수신자 구분
	    if (message.projectchatmessageContent.includes("입장하셨습니다")) {
	        messageElement.classList.add("system-message"); // 입장 메시지 스타일
			
			// 입장 메시지는 발신자 이름을 생략하고 내용만 표시
	        const bubbleElement = document.createElement("div");
	        bubbleElement.classList.add("bubble");
	        bubbleElement.textContent = message.projectchatmessageContent;
	        messageElement.appendChild(bubbleElement);
	
	        messageContainer.appendChild(messageElement);
	        scrollToBottom();
	        return; // 이후 로직 실행 방지
    
	    } else if (message.projectchatmessageSender == `${userId}`) {
	        messageElement.classList.add("sent");
	    } else {
	        messageElement.classList.add("received");
	    }
	
	    // 보낸 사람 ID와 시간 표시
	    const senderElement = document.createElement("div");
	    senderElement.classList.add("sender");

		
	    const messageTime = new Date(message.projectchatmessageDt).toLocaleTimeString('ko-KR', {
	        hour: '2-digit',
	        minute: '2-digit',
	    }); // 시간 포맷 지정
	    senderElement.textContent = `${senderName} (${messageTime})`;
	
	    // 말풍선 요소 생성
	    const bubbleElement = document.createElement("div");
	    bubbleElement.classList.add("bubble");
	    bubbleElement.textContent = message.projectchatmessageContent;
	
	    // ID와 말풍선 추가
	    messageElement.appendChild(senderElement);
	    messageElement.appendChild(bubbleElement);
	    messageContainer.appendChild(messageElement);
	
	    scrollToBottom();
	};

	// 메시지 전송
    const sendMessage = () => {
        const content = messageInput.value.trim();

        if (!content) {
            swal("알림", "메시지를 입력하세요.", "warning");
            return;
        }

        const message = {
            taskNo: taskNo,
            teamCd: teamCd,
            projectchatmessageContent: content,
            projectchatmessageSender: userId, // 사용자 ID 설정
        };

		 console.log("전송 메시지:================>>>", message); // 디버깅 로그
	
        // 메시지 전송 (STOMP 사용)
        stompClient.send("/app/chat/send", {}, JSON.stringify(message));

        // 입력창 초기화
        messageInput.value = "";
    };

    // 채팅 메시지 영역 스크롤을 항상 아래로 유지
    const scrollToBottom = () => {
        messageContainer.scrollTop = messageContainer.scrollHeight;
    };

    // 이벤트 리스너 설정
    sendButton.addEventListener("click", sendMessage);
    messageInput.addEventListener("keypress", (e) => {
        if (e.key == "Enter") {
            sendMessage();
        }
    });


    // 이전 대화 내역 가져오기
    const fetchChatHistory = async () => {
        try {
            messageContainer.innerHTML = "<p>로딩 중...</p>"; // 로딩 메시지 표시

            const response = await fetch(chatUrl);
            if (!response.ok) throw new Error("메시지 내역 조회 실패");

            const messages = await response.json();
            messageContainer.innerHTML = ""; // 로딩 완료 후 초기화

            messages.forEach((message) => {
                displayMessage(message);
            });

            scrollToBottom();
        } catch (error) {
            console.error("메시지 내역 조회 실패:", error);
            swal("오류", "채팅 내역을 불러오지 못했습니다. 다시 시도해주세요.", "error");
        }
    };

   // 입장 메시지 전송
    const sendJoinMessage = () => {
        const joinMessage = {
            taskNo: taskNo,
            teamCd: teamCd,
            projectchatmessageSender: userId,
            projectchatmessageContent: "", // 서버에서 "입장하셨습니다" 메시지 생성
        };

        stompClient.send(`/app/chat/join`, {}, JSON.stringify(joinMessage));
    };

    

    // 초기 메시지 로드
    fetchChatHistory();

    // WebSocket 연결
    connectWebSocket();

});//DOM 끝