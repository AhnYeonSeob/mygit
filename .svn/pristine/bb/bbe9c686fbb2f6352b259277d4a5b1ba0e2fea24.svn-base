function loadAttendanceData() {
    // 선택된 강의 번호 가져오기
    var contextPath = document.getElementById("contextPath").value;
    var lectNo = document.getElementById("lectNo").value;
	
	fetch(`${contextPath}/aten/list?lectNo=${lectNo}`)
		.then(response => response.json())
		.then(data => {
			const chartData = data.map(item => ({
	            atndCd: mapAttendanceCode(item.atndCd), // 코드 값을 라벨로 변환
	            count: item.count
            }));
			 drawArcChart(chartData);
		})
		.catch(error => {
			console.error('Error:', error);  // 에러 발생 시 콘솔에 출력
		});
}


// 'ATN1', 'ATN2', 'ATN3', 'ATN4'를 '출석', '지각', '결석', '조퇴'로 매핑
function mapAttendanceCode(code) {
    const attendanceLabels = {
        'ATN1': '출석',
        'ATN2': '지각',
        'ATN3': '결석',
        'ATN4': '조퇴'
    };
    return attendanceLabels[code] || '알 수 없음'; // 매칭되지 않는 코드에 대한 처리
}

function drawArcChart(chartData) {
    // #pieChart 내의 기존 SVG 제거
    d3.select("#pieChart").select("svg").remove();

    // 기본적인 SVG 설정
    const width = 250, height = 250;
    const radius = Math.min(width, height) / 2;
    
    // #pieChart div 선택 후 SVG 요소를 생성
    const svg = d3.select("#pieChart").append("svg")
        .attr("width", width)
        .attr("height", height)
      .append("g")
        .attr("transform", `translate(${width / 2},${height / 2})`);

    // Arc 생성자
    const arc = d3.arc()
        .innerRadius(0)
        .outerRadius(radius);

    // Pie chart의 데이터 준비
    const pie = d3.pie()
        .value(d => d.count)
        .sort(null);

    const arcs = pie(chartData);

    // 각 항목의 총합 계산
    const total = chartData.reduce((sum, item) => sum + item.count, 0);

    // 색상 매핑
    const colorMap = {
        '출석': ['#2196F3', '#1976D2'],
        '지각': ['#4CAF50', '#388E3C'],
        '결석': ['#FFEB3B', '#FBC02D'],
        '조퇴': ['#F44336', '#D32F2F']
    };

    // Arc들을 추가하면서 애니메이션 처리 (Arc tween)
    const path = svg.selectAll(".arc")
        .data(arcs)
      .enter().append("path")
        .attr("class", "arc")
        .attr("d", arc)
        .attr("fill", (d) => {
            // 각 항목에 맞는 색상 설정
            const color = colorMap[d.data.atndCd];
            return color ? color[0] : d3.schemeCategory10[d.index % 10]; // 첫 번째 색상 사용
        })
        .attr("transform", "scale(0)")
        .transition()
        .duration(1000)
        .ease(d3.easeElastic)
        .attr("transform", "scale(1)");

    // 텍스트 라벨 추가 (각각의 Arc에 텍스트)
    svg.selectAll(".arc-text")
        .data(arcs)
      .enter().append("text")
        .attr("class", "arc-text")
        .attr("transform", d => {
            const centroid = arc.centroid(d); // Arc의 중심을 계산
            return `translate(${centroid})`;
        })
        .attr("dy", ".35em")
        .attr("text-anchor", "middle")
        .attr("fill", "black") // 글자 색을 검은색으로 설정
        .style("font-family", "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif") // 세련된 폰트 설정
        .style("font-size", "18px") // 글자 크기 설정
        .style("font-weight", "bold") // 글자 두께 설정
        .style("letter-spacing", "1px") // 글자 간격 설정
        .style("text-shadow", "1px 1px 2px rgba(0, 0, 0, 0.3)") // 텍스트 그림자 추가
        .text(d => d.data.atndCd); // 첫 번째 줄: 출석 유형

    // 퍼센트 텍스트 추가 (각각의 Arc에 퍼센트 표시)
    svg.selectAll(".arc-percent")
        .data(arcs)
      .enter().append("text")
        .attr("class", "arc-percent")
        .attr("transform", d => {
            const centroid = arc.centroid(d); // Arc의 중심을 계산
            return `translate(${centroid[0]}, ${centroid[1] + 20})`; // 라벨 아래에 퍼센트 표시
        })
        .attr("dy", ".35em")
        .attr("text-anchor", "middle")
        .attr("fill", "black") // 퍼센트 글자 색을 검은색으로 설정
        .style("font-family", "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif") // 세련된 폰트 설정
        .style("font-size", "14px") // 퍼센트 폰트 크기 설정
        .style("font-weight", "normal") // 퍼센트 폰트 두께 설정
        .style("letter-spacing", "0.5px") // 글자 간격 설정
        .style("text-shadow", "1px 1px 2px rgba(0, 0, 0, 0.3)") // 텍스트 그림자 추가
        .text(d => {
            // 퍼센트 계산
            const percentage = ((d.data.count / total) * 100).toFixed(1);
            return `${percentage}%`; // 퍼센트 텍스트
        });
}

















