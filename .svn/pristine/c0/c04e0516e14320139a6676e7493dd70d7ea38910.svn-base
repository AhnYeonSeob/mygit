


// 모달이 열릴 때마다 해당 데이터를 채워넣고, absenceCd 값을 가져오는 함수
var myModal = document.getElementById('staticBackdrop');

var contextPath = document.querySelector('#contextPath');
var lectNo = document.querySelector('#lectNo');




/*
myModal.addEventListener('show.bs.modal', function (event) {
    // 버튼을 클릭했을 때 전달된 데이터를 가져오기
    var button = event.relatedTarget; // 버튼을 클릭한 요소
    var lectOrder = button.getAttribute('data-lectOrder');
    var studentName = button.getAttribute('data-studentName');
    var studentId = button.getAttribute('data-studentId');
    var absenceReason = button.getAttribute('data-absenceReason');
    //var absenceReason = editorInstance.getData();
    var absenceStatus = button.getAttribute('data-absenceStatus');
    //var lectNo = button.getAttribute('data-lectNo'); // data-lectNo 
    //var lectNo = `${lectNo.value}` 
    var absenceCd = button.getAttribute('data-absenceCd'); // data-absenceCd 
    var weekCd = button.getAttribute('data-weekCd'); // weekCd 값 

	console.log("내용의 값이 있나요? : ", absenceReason);
	//editorInstance.setData(absenceReason);
	console.log("data.absenceResn 사유 내용 : ", data.absenceResn);
	
	editorInstance.getData(data.absenceResn); 
	
	// editorInstance.setData(data.absenceResn);

    // 모달에 해당 데이터 채우기
    document.getElementById('lectOrder2').textContent = lectOrder;
    document.getElementById('studentName2').textContent = studentName;
    document.getElementById('studentId2').textContent = studentId;
    document.getElementById('absenceReason2').innerHTML = editorInstance.getData();
    document.getElementById('absenceStatus2').textContent = absenceStatus;

	console.log("사유 저장된거 보기2 : ", editorInstance.getData());
	console.log('모달창에 넣어줄거  : ',lectOrder, studentName, studentId, absenceStatus)
	
	console.log(`${lectNo.value}`)
	console.log('모달 승인버튼 : ',absenceCd, `${lectNo.value}`, lectOrder, studentId, weekCd)
	console.log('모달 반려버튼 : ',absenceCd)


     // 모달 -> 승인 버튼
    document.getElementById('approveButton').addEventListener('click', function() {
        // 승인 처리 시 absenceStatus를 'CO02'로 설정
        document.getElementById('absenceStatus2').textContent = 'CO02';
        handleAbsenceRequest(true, absenceCd, `${lectNo.value}`, lectOrder, studentId, weekCd, 'ATN1'); // 승인 처리
    });	

    // 모달 -> 반려 버튼
    document.getElementById('rejectButton').addEventListener('click', function() {
        // 반려 처리 시 absenceStatus를 'CO03'으로 설정
        document.getElementById('absenceStatus2').textContent = 'CO03';
        handleAbsenceRequest(false, absenceCd, `${lectNo.value}`, lectOrder, studentId, weekCd, null); // 반려 처리
    });
});*/





myModal.addEventListener('show.bs.modal', function (event) {
    var button = event.relatedTarget; // 버튼을 클릭한 요소

    var lectOrder = button.getAttribute('data-lectOrder');
    var studentName = button.getAttribute('data-studentName');
    var studentId = button.getAttribute('data-studentId');
    var absenceReason = button.getAttribute('data-absenceReason');
    var absenceStatus = button.getAttribute('data-absenceStatus');
    var absenceCd = button.getAttribute('data-absenceCd');
    var weekCd = button.getAttribute('data-weekCd');
    
    console.log("내용의 값이 있나요? : ", absenceReason);
    console.log("내용의 값이 있나요? : ", `${contextPath.value}`);
    console.log("내용의 값이 있나요? : ", `${lectNo.value}`);
    console.log("내용의 값이 있나요? : ", `${absenceCd}`);

    // 서버에서 absenceResn 데이터를 가져오는 fetch 요청을 추가
    fetch(`${contextPath}/lecture/${lectNo.value}/absence/${absenceCd}`)
        .then(response => response.json())  // 서버에서 받은 JSON 응답
        .then(data => {
            // 여기서 'data'는 서버 응답 데이터입니다
            console.log("서버에서 받은 데이터:", data);
            console.log("서버에서 받은 데이터:", data.absenceResn);

            // 서버 응답에서 사유(absenceResn) 값을 가져와서 CKEditor에 설정
            // editorInstance.setData(data.absenceResn);

            // 모달에 해당 데이터 채우기
            document.getElementById('lectOrder2').textContent = lectOrder;
            document.getElementById('studentName2').textContent = studentName;
            document.getElementById('studentId2').textContent = studentId;
            document.getElementById('absenceReason2').innerHTML = data.absenceResn; // absenceReason 업데이트
            document.getElementById('absenceStatus2').textContent = absenceStatus; // absenceStatus 값 채우기

            console.log('모달창에 넣어줄거  : ', lectOrder, studentName, studentId, absenceStatus);
        })
        .catch(error => {
            console.error('Error:', error);
        });

    // 모달 -> 승인 버튼
    document.getElementById('approveButton').addEventListener('click', function() {
        const cocoCd = 'CO02'; // 승인 상태 값
        document.getElementById('absenceStatus2').textContent = cocoCd; // 'CO02' 설정

        // 승인 처리 함수 호출 (absenceStatus는 cocoCd로 사용)
        handleAbsenceRequest(true, absenceCd, `${lectNo.value}`, lectOrder, studentId, weekCd, 'ATN1', cocoCd); // 승인 시 'ATN1' 사용
    });

    // 모달 -> 반려 버튼
    document.getElementById('rejectButton').addEventListener('click', function() {
        const cocoCd = 'CO03'; // 반려 상태 값
        document.getElementById('absenceStatus2').textContent = cocoCd; // 'CO03' 설정

        // 반려 처리 함수 호출 (absenceStatus는 cocoCd로 사용)
        handleAbsenceRequest(false, absenceCd, `${lectNo.value}`, lectOrder, studentId, weekCd, null, cocoCd); // 반려 시 null 사용
    });
});










function removeNullProperties(obj) {
    if (typeof obj !== 'object' || obj === null) {
        return obj; // 객체가 아니거나 null인 경우 그대로 반환
    }

    // 객체를 복제하면서 null이 아닌 값만 유지
    if (Array.isArray(obj)) {
        return obj.map(item => removeNullProperties(item)).filter(item => item !== null);
    }

    const result = {};
    for (const key in obj) {
        if (obj[key] !== null) {
            result[key] = removeNullProperties(obj[key]);
        }
    }
    return result;
}

/*function handleAbsenceRequest(isApproved, absenceCd, lectNo, lectOrder, stuId, weekCd, atndCd) {
    const absenceStatus = document.getElementById('absenceStatus').innerText;
    const data = {
        absenceCd: absenceCd, 
        cocoCd: absenceStatus,
        isApproved: isApproved // 승인 여부
    };

    // 승인 처리일 때만 attendanceVO를 포함
    if (isApproved) {
        data.attendanceVO = {
            lectNo: lectNo,
            lectOrder: lectOrder,
            stuId: stuId,
            weekCd: weekCd,
            atndCd: atndCd // 출결 상태 정보
        };
    } else {
        // 반려 처리일 때는 attendanceVO를 포함하지 않거나 null로 설정
        data.attendanceVO = null; // 반려 시에는 출결 상태를 변경하지 않음
    }

    // removeNullProperties 함수를 호출하여 null 속성 제거
    const cleanData = removeNullProperties(data);

    console.log('cleanData : ', cleanData);
	

    const url = `${contextPath}/lecture/${lectNo}/absence/edit`;
	
	
	console.log("url 확인");
	console.log(`${contextPath}`);
	console.log(`${lectNo}`);
	console.log("교수님 데이터바꿔주세요. : ", data);
	

    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(cleanData) // null이 제거된 데이터를 서버로 전송
    })
    .then(response => response.json())
    .then(data => {
    // 응답에 상관 없이 성공 처리 후 페이지 새로 고침
    alert(isApproved ? "공결 인증서 승인 처리 완료!" : "공결 인증서 반려 처리 완료!");
    location.reload(); // 페이지 새로고침
	})
    .catch(error => {
        console.error('Error:', error);
        alert("서버와의 통신 오류가 발생했습니다.");
    });
}*/



// handleAbsenceRequest 함수
function handleAbsenceRequest(isApproved, absenceCd, lectNo, lectOrder, stuId, weekCd, atndCd, cocoCd) {
    const data = {
        absenceCd: absenceCd, 
        cocoCd: cocoCd, // cocoCd는 승인/반려 상태 코드
        isApproved: isApproved // 승인 여부
    };

    // 승인 처리일 때만 attendanceVO를 포함
    if (isApproved) {
        data.attendanceVO = {
            lectNo: lectNo,
            lectOrder: lectOrder,
            stuId: stuId,
            weekCd: weekCd,
            atndCd: atndCd // 출결 상태 정보 (승인 시 ATN1)
        };
    } else {
        // 반려 처리일 때는 attendanceVO를 포함하지 않거나 null로 설정
        data.attendanceVO = null; // 반려 시에는 출결 상태를 변경하지 않음
    }

    // removeNullProperties 함수를 호출하여 null 속성 제거
    const cleanData = removeNullProperties(data);

    console.log('cleanData : ', cleanData);
    
    const url = `${contextPath}/lecture/${lectNo}/absence/edit`;

    console.log("url 확인");
    console.log(`${contextPath}`);
    console.log(`${lectNo}`);
    console.log("교수님 데이터바꿔주세요. : ", data);

    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(cleanData) // null이 제거된 데이터를 서버로 전송
    })
    .then(response => response.json())
    .then(data => {
        // 응답에 상관 없이 성공 처리 후 페이지 새로 고침
        alert(isApproved ? "공결 인증서 승인 처리 완료!" : "공결 인증서 반려 처리 완료!");
        location.reload(); // 페이지 새로고침
    })
    .catch(error => {
        console.error('Error:', error);
        alert("서버와의 통신 오류가 발생했습니다.");
    });
}





// 수정 작업
/*document.addEventListener("DOMContentLoaded", function() {
    // 버튼 클릭 시
    $('#staticBackdropEdit').on('show.bs.modal', function (event) {
        var button = event.relatedTarget; // 버튼을 클릭한 요소
	    var lectOrder = button.getAttribute('data-lectOrder');
	    var studentName = button.getAttribute('data-studentName');
	    var studentId = button.getAttribute('data-studentId');
	    var absenceReason = button.getAttribute('data-absenceReason');
	    var absenceStatus = button.getAttribute('data-absenceStatus');
	    var lectNo = button.getAttribute('data-lectNo'); // data-lectNo 
	    var absenceCd = button.getAttribute('data-absenceCd'); // data-absenceCd 
	    var weekCd = button.getAttribute('data-weekCd'); // weekCd 값

        // 모달에 데이터 채우기
        document.getElementById('lectOrder').textContent = lectOrder;
	    document.getElementById('studentName').textContent = studentName;
	    document.getElementById('studentId').textContent = studentId;
	    document.getElementById('editAbsenceReason').textContent = absenceReason;
	    document.getElementById('absenceStatus').textContent = absenceStatus;
        
 		// 기존 클릭 이벤트 리스너 제거
        $('#saveEditButton').off('click'); 
		
		// 수정 버튼 클릭 시 fetch로 데이터 업데이트
        $('#saveEditButton').on('click', function() {
            const updatedAbsenceReason = document.getElementById('editAbsenceReason').value; // 수정된 사유
			//const absenceCd = document.getElementById('absenceCd').value;
			
			console.log('Request Body:', {
		        absenceCd: absenceCd,
		        absenceResn: updatedAbsenceReason
		    });
			
			console.log(`${contextPath.value}`);
			console.log(`${lectNo}`);
			
            // fetch로 서버에 업데이트 요청
            fetch(`${contextPath.value}/lecture/${lectNo}/absence/edit/reason`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    absenceCd: absenceCd, 
                    absenceResn: updatedAbsenceReason // 수정된 사유만 보냄
                })
            })
            .then(response => response.json())
            .then(data => {
                console.log('성공:', data);
                alert('사유가 성공적으로 수정되었습니다.');
                $('#staticBackdropEdit').modal('hide'); // 모달 닫기
				window.location.reload(); // 페이지 새로고침
            })
            .catch(error => {
                console.error('에러 발생:', error);
                alert('수정 중 오류가 발생했습니다.');
            });
        });
    });
});*/



// 수정 버튼 클릭 시 이벤트 처리
/*document.querySelectorAll('.editBtn').forEach(button => {
    button.addEventListener('click', function() {
        const absenceCd = this.getAttribute('data-absenceCd');  // absenceCd 값을 가져옵니다.
		
		console.log(absenceCd)
		console.log('contextPath:', contextPath.value);
	    console.log('lectNo:', lectNo.value);
		
        // AJAX 요청으로 서버에 absenceCd를 보내고 데이터 받아오기
        fetch(`${contextPath.value}/lecture/${lectNo.value}/absence/${absenceCd}`)  // 서버에서 해당 absenceCd에 대한 정보를 받아옵니다.
            .then(response => response.json())
            .then(data => {
                // 서버로부터 받은 데이터를 모달에 업데이트합니다.
                document.getElementById('lectOrder').innerText = data.lectOrder;
                document.getElementById('studentName').innerText = data.studentName;
                document.getElementById('studentId').innerText = data.studentId;
                document.getElementById('absenceStatus').innerText = data.absenceStatus;
                document.getElementById('editAbsenceReason').innerHTML = data.absenceReason;  // textarea에 값 설정
				editorInstance.setData(data.absenceReason);  // CKEditor에서 데이터 설정
			})
            .catch(error => {
                console.error('Error:', error);
            });
    });
});*/






// 수정버튼을 눌렀을때 처리하는 스크립트
document.querySelectorAll('.editBtn').forEach(button => {
    button.addEventListener('click', function() {
        const absenceCd = this.getAttribute('data-absenceCd');  // absenceCd 값을 가져옵니다.
		
		
        console.log('absenceCd:', absenceCd);
		console.log(contextPath);
		console.log(`${contextPath.value}`);
		console.log(`${lectNo.value}`);

        // AJAX 요청으로 서버에 absenceCd를 보내고 데이터 받아오기
        fetch(`${contextPath}/lecture/${lectNo.value}/absence/${absenceCd}`)
		.then(response => response.json())
		.then(data => {
		    console.log("서버에서 받은 데이터:", data);  // 데이터 구조를 콘솔로 출력
		
		    // 서버로부터 받은 데이터를 모달에 업데이트합니다.
		    document.getElementById('lectOrder').innerText = data.lectOrder;
		    document.getElementById('studentName').innerText = data.studentVO.nm;
		    document.getElementById('studentId').innerText = data.stuId;
		    document.getElementById('absenceStatus').innerText = data.atst;
		
		    // editAbsenceReason에 서버에서 받아온 사유 설정
			/*const input = document.getElementById('inputText').value;
			/*ck에디터.
			어제 햇던거 모달창 닫을때  */
			
			console.log("data.absenceResn 사유 내용 : ", data.absenceResn);

		    editorInstance.setData(data.absenceResn); // textarea에 사유 설정
		
		    // 모달을 표시
		    $('#staticBackdropEdit').modal('show');
			
			
			////////////////////////////////////////////////// 수정 버튼 추가
			
			// 기존 클릭 이벤트 리스너 제거
	        //$('#saveEditButton').off('click'); 
			
			// 수정 버튼 클릭 시 fetch로 데이터 업데이트
	        $('#saveEditButton').on('click', function() {
	            const absenceResn = editorInstance.getData(); // 수정된 사유
				//const absenceCd = document.getElementById('absenceCd').value;
				
				console.log("수정 버튼 눌렀을때 데이터가 보이는지1 : ", document.getElementById('editor'))
				console.log("수정 버튼 눌렀을때 데이터가 담기는지2 : ", data.absenceResn)
				console.log("수정 버튼 눌렀을때 데이터가 담기는지3 : ", data.absenceResn.value)
				console.log("수정 버튼 눌렀을때 데이터가 담기는지4 : ", editorInstance.getData)
				console.log("수정 버튼 눌렀을때 데이터가 담기는지5 : ", editorInstance.getData());
				
				
				console.log('Request Body:', {
			        absenceCd: absenceCd,
			        absenceResn: absenceResn
			    });

			//const absenceData = {
			//	absenceCd: absenceCd,           // 강의번호
			//	absenceResn: absenceResn, // 공결 사유
			//};
			
			// 폼으로 보내고 있지 않음
			//let absenseForm = document.querySelector('#form-table');
			/*let formData = new FormData(absenseForm);
			for(let key in absenceData){
				formData.append(key, absenceData[key]);
			}*/
			
			// 콘솔에도 출력 (디버깅용)
			/*formData.forEach((v, k)=>{
				console.log(v, k)
			});*/
				
				
	            // fetch로 서버에 업데이트 요청
	            fetch(`${contextPath}/lecture/${lectNo.value}/absence/edit/reason`, {
	                method: 'POST',
					//body: formData
	                headers: {
	                    'Content-Type': 'application/json',
	                },
	                body: JSON.stringify({
	                    absenceCd: absenceCd, 
	                    absenceResn: absenceResn // 수정된 사유만 보냄
	                })
	            })
	            .then(response => response.json())
	            .then(data => {
	                console.log('성공:', data);
	                alert('사유가 성공적으로 수정되었습니다.');
	                $('#staticBackdropEdit').modal('hide'); // 모달 닫기
					window.location.reload(); // 페이지 새로고침
	            })
	            .catch(error => {
	                console.error('에러 발생:', error);
	                alert('수정 중 오류가 발생했습니다.');
	            });
	        });
				
	
			})
			.catch(error => {
			    console.error('Error:', error);
			});
	});
});



// 공결 인증서 삭제 처리
document.addEventListener('DOMContentLoaded', function() {
    // 'absenceDeleteBtn' 클래스를 가진 모든 버튼을 선택
    const deleteButtons = document.querySelectorAll('.absenceDeleteBtn');

    // 각 버튼에 클릭 이벤트 추가
    deleteButtons.forEach(function(button) {
        button.addEventListener('click', function() {
            // 버튼에서 data-absenceCd와 data-cocoCd 값을 가져옴
            const absenceCd = button.getAttribute('data-absenceCd');
            const cocoCd = button.getAttribute('data-cocoCd');
			const lectNo = button.getAttribute('data-lectNo');
            

			// fetch로 서버에 업데이트 요청
            fetch(`${contextPath.value}/lecture/${lectNo}/absence/drop`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    absenceCd: absenceCd, 
                })
            })
            .then(response => response.json())
            .then(data => {
                console.log('성공:', data);
                alert('공결 신청이 성공적으로 삭제되었습니다.');
                $('#staticBackdropEdit').modal('hide'); // 모달 닫기
				window.location.reload(); // 페이지 새로고침
            })
            .catch(error => {
                console.error('에러 발생:', error);
                alert('삭제 중 오류가 발생했습니다.');
            });


        });
    });
});


// 사유 내용 글자수 제한하기
document.querySelectorAll('.absenceResn').forEach(function(td) {
    const text = td.textContent.trim();  // 기존 텍스트 가져오기
    if (text.length > 20) {
        td.textContent = text.substring(0, 20) + '...';  // 20자 이상일 경우 '...' 추가
    }
});

/*
// 셀렉트 박스
document.addEventListener('DOMContentLoaded', function() {
  document.getElementById('statusFilter').addEventListener('change', function() {
    var selectedStatus = this.value; // 셀렉트박스에서 선택된 값
    console.log("선택된 값: " + selectedStatus); // 디버깅용 로그

    var rows = document.querySelectorAll('.absenceRow'); // 모든 행을 선택

    rows.forEach(function(row) {
      var status = row.getAttribute('data-absence-status'); // 각 행의 상태 값 (absence.PRST)
      console.log("행의 상태 값: " + status); // 디버깅용 로그

      // "전체조회"가 선택되면 모든 행을 표시
      if (selectedStatus === '전체') {
        row.style.display = ''; // 모든 행을 보이도록 설정
      } else if (status === selectedStatus) {
        // 그 외에는 선택된 상태와 일치하는 행만 표시
        row.style.display = ''; // 상태가 일치하는 행은 보이도록 설정
      } else {
        row.style.display = 'none'; // 그 외의 행은 숨기기
      }
    });
  });
});
*/




var contextPath = document.querySelector('#form-table').dataset['path'];

var editorInstance;
	//필요한 자원 import하는 구문
	import {
		ClassicEditor,
		SimpleUploadAdapter,
		Bold,
		Italic,
		Underline,
		BlockQuote,
		Essentials,
		Heading,
		Image,
		ImageUpload,
		Link,
		List,
		MediaEmbed,
		Table,
		TableToolbar,
		FontSize,
		FontFamily,
		FontColor,
		Undo
	
	} from '../../../resources/js/ckeditor5/ckeditor5.js';
	
	//이미지 업로드 처리할때 보안때문에 html에서 제공하는 token 사용
	const csrfMetaTag = document.querySelector('meta[name="csrf-token"]');
	//만약 meta 설정이 없는 경우 null로 초기화 있다면, token값 가져옴
	const csrfToken = csrfMetaTag ? csrfMetaTag.getAttribute('content') : null;
	
	//Editor의 종류중 사용할 Editor 생성 ClassicEditor권장 다른 종류 사용하고싶다면, 문서확인 후 사용
	ClassicEditor.create( document.querySelector('#editor'),{
		licenseKey: 'GPL' //5버전 기본 라이센스키 ; 필수값
		//사용할 플러그인 플러그인종류는 문서확인
		,  plugins: [
            Essentials, Bold, Italic, Underline, Link, Image, ImageUpload,
            List, BlockQuote, Heading, MediaEmbed, Table, TableToolbar, 
            FontSize, FontFamily, FontColor, Undo, SimpleUploadAdapter
        ],
		// 툴바 메뉴
        toolbar: [
            'undo', 'redo', '|', 'bold', 'italic', 'underline', '|', 'link', 'imageUpload', '|',
            'bulletedList', 'numberedList', '|', 'blockquote', 'insertTable', '|',
            'fontSize', 'fontFamily', 'fontColor', '|', 'mediaEmbed'
        ]
		,language: 'ko' // 한국어 설정
		//이미지 업로드 어댑터 config설정
		//이미지 url은 noticeboard폴더에 해당 처리 controller를 만들어두었음.
		//컨트롤러에서 반환값은 url임으로 반환값이 어떻게 오는지 알아야 데이터를 처리할 수 있음.
		, simpleUpload: { 
					uploadUrl: `${contextPath}/imageUpload`
					, headers:  csrfToken ? { 'X-CSRF-TOKEN': csrfToken } : {}
					
			}
	})
	//promise객체가 반환됨.
	.then(editor => {
		editor.editing.view.change(writer => {
			writer.setStyle('height', '400px', editor.editing.view.document.getRoot());
		});
		editorInstance = editor;
    })
    .catch(error => {
        console.error(error);

	})//create에디터 끝
	
	
	
	
	
	
	
	
	
	
	
	
	
	