package kr.or.ddit.yguniv.dissent.controller;

import java.security.Principal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.yguniv.dissent.service.DissentService;
import kr.or.ddit.yguniv.paging.PaginationInfo;
import kr.or.ddit.yguniv.paging.renderer.BootStrapPaginationRenderer;
import kr.or.ddit.yguniv.paging.renderer.DefaultPaginationRenderer;
import kr.or.ddit.yguniv.paging.renderer.PaginationRenderer;
import kr.or.ddit.yguniv.security.conf.PersonVoWrapper;
import kr.or.ddit.yguniv.vo.AttendeeVO;
import kr.or.ddit.yguniv.vo.LectureVO;
import kr.or.ddit.yguniv.vo.PersonVO;
import kr.or.ddit.yguniv.vo.ScoreFormalObjectionVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/dissent")
@RequiredArgsConstructor
public class DissentController {
	
	public static final String MODELNAME = "newDissent";
	private final DissentService service;

	//학생 개인의 강의 리스트 조회
	//추후에 로그인 한 학생의 학번을 가져와야함!
//	public static final String STUDENTID="2024100001";
//	public static final String PROFESSORID="2024300001";
	
	@ModelAttribute(MODELNAME)
	public ScoreFormalObjectionVO newModel() {
		return new ScoreFormalObjectionVO();
	}


		@GetMapping
		public String selectList(Model model
				,@RequestParam(required = false,defaultValue = "1") int page
				,@ModelAttribute("condition") ScoreFormalObjectionVO detailCondition
				,Principal prin
				) {
			
			PaginationInfo<ScoreFormalObjectionVO> paging =new PaginationInfo<>();
			paging.setDetailCondition(detailCondition);
			paging.setCurrentPage(page);
			
			List<ScoreFormalObjectionVO> dissList = service.readProfeDissentList(prin.getName(),paging);
			
			PaginationRenderer renderer = new BootStrapPaginationRenderer();
			String pagingHTML = renderer.renderPagination(paging, "dissentPaging");
			model.addAttribute("pagingHTML", pagingHTML);
			model.addAttribute("dissList", dissList) ;
			
			
			return "dissent/courseDissentList";
		}
		
		@GetMapping("profe/new/dissent/list")
		@ResponseBody
		public List<ScoreFormalObjectionVO> newList(Model model
				,@RequestParam(required = false,defaultValue = "1") int page
				,@ModelAttribute("condition") ScoreFormalObjectionVO detailCondition
				,Principal prin
				) {
			
			PaginationInfo<ScoreFormalObjectionVO> paging =new PaginationInfo<>();
			paging.setDetailCondition(detailCondition);
			paging.setCurrentPage(page);
			
			List<ScoreFormalObjectionVO> data = service.readProfeDissentList(prin.getName(),paging);
			
//			log.info("♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠{}",dissList);
			
//			model.addAttribute("dissList", dissList) ;
			return data;
		}
		
		//이의 내역 하나 조회
		//
		@GetMapping("{stuId}/{lectNo}")
		@ResponseBody
		public Map<String, Object> selectOne(@PathVariable String stuId,@PathVariable String lectNo,Model model) {
//			log.info("♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠{}",stuId);
//			log.info("♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠♠{}",lectNo);

		    Map<String, Object> resp = new HashMap<>();
		    resp.put("dissOne", service.readDissentOne(stuId, lectNo));
		    
			return resp;
		}

		@GetMapping("atten/{stuId}/{lectNo}")
		@ResponseBody
		public Map<String, Object> readAttenLectOne(@PathVariable String stuId,@PathVariable String lectNo,Model model) {
			log.info("★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★{}",stuId);
			log.info("★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★{}",lectNo);
			
			Map<String, Object> resp = new HashMap<>();
			resp.put("attenOne", service.readAttenLectOne(stuId, lectNo));
			
			return resp;
		}
		
		//이의 신청 페이지로 이동
		//학생은 입력 폼
		//학생은 등록할수 있는 페이지가
		@GetMapping("new")
		public String createForm(Model model, Authentication auth) {
			
			PersonVoWrapper pVw =(PersonVoWrapper) auth.getPrincipal();
			PersonVO pVo = pVw.getRealUser();
			
			model.addAttribute("attenLectList", service.readAttenLectList(pVo.getId()));
			model.addAttribute("stuId", pVo.getId());
			model.addAttribute("stuNm", pVo.getNm());
			
			return "dissent/courseDissentForm";
		}
		
		@GetMapping("/newList")
		@ResponseBody
		public Map<String, Object> getNewLectList(Authentication auth) {
		    PersonVoWrapper pVw = (PersonVoWrapper) auth.getPrincipal();
		    PersonVO pVo = pVw.getRealUser();
		    
		    Map<String, Object> response = new HashMap<>();
		    response.put("attenLectList", service.readAttenLectList(pVo.getId()));
		    
		    return response;
		}

		//이의신청 등록
		@PostMapping
		public String create(@RequestBody @Validated ScoreFormalObjectionVO sVo,BindingResult error) {
			Map<String, Object> resp = new HashMap<>();
//			sVo.setLectNo("L009");
//			sVo.setStuId("2024100003");
			log.info("※※※※※※※※※※※※※※※※※※※※※※※※※※※※※{}",sVo);
			
			service.createDissent(sVo);
			
			resp.put("nice", "okok");
			
			
			return "dissent/courseDissentDetail";
		}
		
		//이의 수정 페이지로 이동
		//교수와 교직원이 상세조회를 보고 점수 변동을 할 수 있도록
		@PutMapping
		@ResponseBody
		public ResponseEntity<Object> updateForm(@RequestBody @Validated ScoreFormalObjectionVO sVo, BindingResult error) {
		    Map<String, Object> resp = new HashMap<>();
		    HttpStatus status = HttpStatus.OK;

		    if (!error.hasErrors()) {
		        AttendeeVO aVo = sVo.getAttenVO();
		        aVo.setLectNo(sVo.getLectNo());
		        aVo.setStuId(sVo.getStuId());
		        service.modifyDissentAndAttendee(sVo, aVo);
		    } else {
		        status = HttpStatus.BAD_REQUEST;
		        String errorMessage = error.getFieldErrors().stream()
		            .map(FieldError::getDefaultMessage)
		            .collect(Collectors.joining("\r\n"));
		        resp.put("message", errorMessage); // 메시지 추가
		    }

		    return ResponseEntity.status(status).body(resp);
		}
		
		@GetMapping("{lectNo}")
		@ResponseBody
		public Map<String, Object> getProfeName(@PathVariable String lectNo) {
			 Map<String, Object> resp = new HashMap<>();
			 
			 List<LectureVO> lVo = service.readProfeName(lectNo);
			 
			 resp.put("profeList", lVo);
			 
			return resp;
		}
		
		//등록된 이의 삭제?
		//부적절한 이의 신청 삭제 기능
		@DeleteMapping()
		public String delete() {
			
			return "dissent/courseDissentList";
		}
		
		
		
		
}
