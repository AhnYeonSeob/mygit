/**
 * 
 */

document.addEventListener("DOMContentLoaded", async () => {
	const id = 'prof123';
	const userId = document.querySelector("#userId").value;
	const contextPath = document.querySelector("#contextPath").value;

	await load(userId, contextPath);
	await sendTestNotification();
});

function load(userId, contextPath) {
	return new Promise((resolve, reject) => {
		const eventSource = new EventSource(`${contextPath}/api/notifications/stream/${userId}`);

		eventSource.onopen = function(event) {
			console.log('SSE 연결 수립됨');
			resolve(eventSource);
		};

		eventSource.onmessage = function(event) {
			//console.log('Received raw data:', event.data);
			const notification = JSON.parse(event.data);
			//console.log('Parsed notification:', notification);
			if (notification.list) {
				//console.log('Notification list:', notification.list);
			}
			displayNotification(notification);
		};

		eventSource.onerror = function(error) {
			console.error('SSE 에러:', error);
			eventSource.close();
			reject(error);
		};
	});
}
async function displayNotification(notification) {
    const notificationsUl = document.querySelector('.notifications');
    const contextPath = document.querySelector("#contextPath").value;
    // 기존 알림 항목들 제거 (헤더는 유지)
    const existingItems = notificationsUl.querySelectorAll('li:not(.dropdown-header):not(:first-child)');
    existingItems.forEach(item => item.remove());

    if (notification.list && notification.list.length > 0) {
        notification.list.forEach(noti => {
            const li = document.createElement('li');
            li.className = 'notification-item';
            li.style = "padding: 10px; border-bottom: 1px solid #e9ecef;";
            let direct = "바로가기";
            // 알림 유형에 따른 아이콘 클래스 설정
            let iconClass = 'bi-exclamation-circle text-warning';
            if (noti.notiCd === 'NO01') iconClass = 'bi-check-circle text-success';
            if (noti.notiCd === 'NO02') iconClass = 'bi-info-circle text-primary';
			let dataUrl = noti.notiUrl;
			console.log(dataUrl)
			if(dataUrl == " "){direct = "메인화면으로"}
			
           li.innerHTML = `
    <div style="display: flex; align-items: center;">
        <div style="display: flex; justify-content: center; align-items: center; width: 60px; height: 60px;">
            <i class="bi ${iconClass}" style="font-size: 1.5rem;"></i>
        </div>
        <div style="flex: 1;">
            <h6 style="margin: 0; font-weight: bold;">${noti.notiHead}</h6>
            <p style="margin: 5px 0; font-size: 0.9rem;">${noti.notiCn}</p>
            <p style="margin: 0; font-size: 0.8rem; color: #6c757d;">${noti.sendNm}</p>
            <p style="margin: 0; font-size: 0.8rem; color: #6c757d;">${noti.notiDate}</p>
            <a href="${contextPath}/${noti.notiUrl}" onclick="updateOneReadNotfication(${noti.notiNo})" style="font-size: 0.8rem;">${direct}</a>
        </div>
    </div>
`;


            notificationsUl.appendChild(li);
        });

        // 알림 개수 업데이트
        updateNotificationCount(notification.list.length);
    } else {
        const li = document.createElement('li');
        li.className = 'notification-item';
        li.style = "padding: 10px; text-align: center; color: #6c757d;";
        li.textContent = '새로운 알림이 없습니다.';
        notificationsUl.appendChild(li);
    }

    console.log('Notifications displayed:', notification.list);
}


function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleString('ko-KR', { 
        year: 'numeric', 
        month: '2-digit', 
        day: '2-digit', 
        hour: '2-digit', 
        minute: '2-digit' 
    });
}

function updateNotificationCount(count) {
    const badge = document.querySelector('.nav-link.nav-icon .badge');
    if (badge) {
        badge.textContent = count;
    }
}


async function sendTestNotification() {
	const userId = document.querySelector("#userId").value;
	const contextPath = document.querySelector("#contextPath").value;
	fetch(`${contextPath}/api/notifications/test/${userId}`, { method: 'POST' })
		.then(response => response.json())
		.then(data => console.log('테스트 알림 전송됨:', data))
		.catch(error => console.error('테스트 알림 전송 실패:', error));
}

async function updateOneReadNotfication(notiNo){
	//단건 업데이트 
	
	const contextPath = document.querySelector("#contextPath").value;
	fetch(`${contextPath}/api/notifications/test/${notiNo}`, { method: 'get' })

}
//전체 읽음 표시로 전체 제거
async function updateAllReadNotfication() {
    const contextPath = document.querySelector("#contextPath").value;
    try {
        const response = await fetch(`${contextPath}/api/notifications/test/all`, { method: 'get' });
        if (response.ok) {
            const result = await response.json();
            console.log(result.message);
            
            // UI 직접 업데이트
            updateNotificationUI();
        } else {
            console.error('알림 처리 실패');
        }
    } catch (error) {
        console.error('알림 처리 중 오류 발생:', error);
    }
}

function updateNotificationUI() {
    const notificationsUl = document.querySelector('.notifications');
    // 기존 알림 항목들 제거 (헤더는 유지)
    const existingItems = notificationsUl.querySelectorAll('li:not(.dropdown-header)');
    existingItems.forEach(item => item.remove());

    // "모든 알림을 읽었습니다" 메시지 추가
    const li = document.createElement('li');
    li.className = 'notification-item';
    li.innerHTML = `
        <i class="bi bi-check-circle text-success"></i>
        <div>
            <h4>알림</h4>
            <p>모든 알림을 읽었습니다.</p>
        </div>
    `;
    notificationsUl.appendChild(li);

    // 알림 카운트 업데이트
    updateNotificationCount(0);
}
















