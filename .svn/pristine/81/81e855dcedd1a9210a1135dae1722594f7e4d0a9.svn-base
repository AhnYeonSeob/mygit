package kr.or.ddit.yguniv.person.dao;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import kr.or.ddit.yguniv.annotation.RootContextWebConfig;
import kr.or.ddit.yguniv.vo.PersonVO;
import lombok.extern.slf4j.Slf4j;

@RootContextWebConfig
@Transactional
@Slf4j
class PersonMapperTest {

	@Autowired
	PersonMapper mapper;
	
	PersonVO person;
	
	
	@BeforeEach
	void beforeEach() {
		person = new PersonVO();
		person.setId("1234");
		person.setNm("dummy");
		person.setPswd("java");
		person.setBrdt("19970201");
		person.setSexdstnCd("f");
		person.setZip("23455");
		person.setRdnmadr("더미");
		person.setDaddr("더미2");
		person.setMbtlnum("010-0000-0000");
		person.setEml("dummy@naver.com");
		person.setCrtfcMnCd("test");
		person.setEmlRcptnAgreYn("N");
		person.setSmsRcptnAgreYn("N");
		person.setLastConectDe("20241202");
		person.setPswdFailrCo(0);
		person.setPersonYn("Y");
		assertEquals(1, mapper.insertPerson(person));
	
	}
	
	@Disabled
	@Test
	void testSelectPerson() {
		assertNotNull(mapper.selectPerson("2024100001"));
	}

	@Test
	void testIncrementHit() {
		//assertEquals(1, mapper.incrementHit(board.getBoNo()));
	}

	@Test
	void testSelectBoardList() {
//		PaginationInfo paging = new PaginationInfo();
//		paging.setCurrentPage(1);
//		SimpleCondition simpleCondition = new SimpleCondition();
//		simpleCondition.setSearchWord("은대");
//		paging.setSimpleCondition(simpleCondition);
//		assertDoesNotThrow(() -> mapper.selectBoardList(paging));
	}

	@Test
	void testSelectBoardCount() {
//		PaginationInfo paging = new PaginationInfo();
//		paging.setCurrentPage(1);
//		SimpleCondition simpleCondition = new SimpleCondition();
//		simpleCondition.setSearchWord("은대");
//		paging.setSimpleCondition(simpleCondition);
//		assertDoesNotThrow(() -> mapper.selectTotalRecord(paging));
	}

	@Test
	@Disabled
	void testUpdateBoard() {
		person.setNm("new test");
		assertEquals(1, mapper.updatePerson(person));
	}

	@Test
	void testDeleteBoard() {
		assertEquals(1, mapper.deletePerson(person.getId()));
	}
	
	
	@Disabled
	@Test
	void test() {
		assertDoesNotThrow(()->{
			mapper.selectPersonList();
		});
		
	}

}
