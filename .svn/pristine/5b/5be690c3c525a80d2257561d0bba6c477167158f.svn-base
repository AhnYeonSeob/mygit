/**
 * 
 */

document.addEventListener("DOMContentLoaded", async () => {
	const id = 'prof123';
	const userId = document.querySelector("#userId").value;
	const contextPath = document.querySelector("#contextPath").value;

	await load(userId, contextPath);
	await sendTestNotification();
});

function load(userId, contextPath) {
	return new Promise((resolve, reject) => {
		const eventSource = new EventSource(`${contextPath}/api/notifications/stream/${userId}`);

		eventSource.onopen = function(event) {
			console.log('SSE 연결 수립됨');
			resolve(eventSource);
		};

		eventSource.onmessage = function(event) {
			//console.log('Received raw data:', event.data);
			const notification = JSON.parse(event.data);
			//console.log('Parsed notification:', notification);
			if (notification.list) {
				//console.log('Notification list:', notification.list);
			}
			displayNotification(notification);
		};

		eventSource.onerror = function(error) {
			console.error('SSE 에러:', error);
			eventSource.close();
			reject(error);
		};
	});
}
async function displayNotification(notification) {
    const notificationsUl = document.querySelector('.notifications');
    
    // 기존 알림 항목들 제거 (헤더는 유지)
    const existingItems = notificationsUl.querySelectorAll('li:not(.dropdown-header)');
    existingItems.forEach(item => item.remove());

    if (notification.list && notification.list.length > 0) {
        notification.list.forEach(noti => {
            const li = document.createElement('li');
            li.className = 'notification-item';
            
            // 알림 유형에 따른 아이콘 클래스 설정
            let iconClass = 'bi-exclamation-circle text-warning';
            if (noti.notiCd === 'NO01') iconClass = 'bi-check-circle text-success';
            if (noti.notiCd === 'NO02') iconClass = 'bi-info-circle text-primary';

            li.innerHTML = `
                <i class="bi ${iconClass}"></i>
                <div>
                    <h4>${noti.notiCd}</h4>
                    <p>${noti.notiCn}</p>
                    <p>${noti.notiDate}</p>
                </div>
            `;

            notificationsUl.appendChild(li);

            // 구분선 추가
            const divider = document.createElement('li');
            divider.innerHTML = '<hr class="dropdown-divider">';
            notificationsUl.appendChild(divider);
        });

        // 'Show all notifications' 푸터 추가
        const footerLi = document.createElement('li');
        footerLi.className = 'dropdown-footer';
        footerLi.innerHTML = '<a href="#">Show all notifications</a>';
        notificationsUl.appendChild(footerLi);

        // 알림 개수 업데이트
        updateNotificationCount(notification.list.length);
    } else {
        const li = document.createElement('li');
        li.className = 'notification-item';
        li.textContent = '새로운 알림이 없습니다.';
        notificationsUl.appendChild(li);
    }

    console.log('Notifications displayed:', notification.list);
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleString('ko-KR', { 
        year: 'numeric', 
        month: '2-digit', 
        day: '2-digit', 
        hour: '2-digit', 
        minute: '2-digit' 
    });
}

function updateNotificationCount(count) {
    const badge = document.querySelector('.nav-link.nav-icon .badge');
    if (badge) {
        badge.textContent = count;
    }
}


async function sendTestNotification() {
	const userId = document.querySelector("#userId").value;
	const contextPath = document.querySelector("#contextPath").value;
	fetch(`${contextPath}/api/notifications/test/${userId}`, { method: 'POST' })
		.then(response => response.json())
		.then(data => console.log('테스트 알림 전송됨:', data))
		.catch(error => console.error('테스트 알림 전송 실패:', error));
}
