package kr.or.ddit.yguniv.attendeetest.controller;

import java.security.Principal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.yguniv.attendeetest.service.AttendeeTestService;
import kr.or.ddit.yguniv.commons.exception.PKNotFoundException;
import kr.or.ddit.yguniv.lecture.service.LectureMaterialsServiceImpl;
import kr.or.ddit.yguniv.test.service.TestService;
import kr.or.ddit.yguniv.vo.LectureVO;
import kr.or.ddit.yguniv.vo.QuestionAnswerVO;
import kr.or.ddit.yguniv.vo.QuestionVO;
import kr.or.ddit.yguniv.vo.TestVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/attendeeTest/{lectNo}")
public class AttendeeTestController {
	
	public static final String MODELNAME = "newQuestion";
		//교수 개인의 강의 리스트 조회
	//추후에 로그인 한 교수의 교번을 가져와야함!
	@Autowired
	private LectureMaterialsServiceImpl lectMateService;

	@Autowired
	private AttendeeTestService service;
	@Autowired
	private TestService testService;
	   
	
	   @ModelAttribute
	   public void addLecture(@PathVariable String lectNo, Model model){
	
	      LectureVO lectureVO = lectMateService.selectLecture(lectNo);
	      if(lectureVO == null) {
	         throw new PKNotFoundException("해당 강의는 존재하지 않습니다", true);
	      }
	      model.addAttribute("lecture", lectureVO);
	   }

	   @ModelAttribute(MODELNAME)
	   public QuestionVO testBox(@PathVariable String lectNo, Model model){
		   return new QuestionVO();
	   }
	   
	/*
	 * 학생이 강의페이지로 이동
	 * 시험 버튼 클릭
	 * 등록된 시험 링크 클릭
	 * 시험 대기화면 이동
	 * 응시버튼 클릭
	 * 문제 풀기
	 * 푼 이후 제출 버튼 클릭
	 * 전송 완료 하고 다시 밖으로 나옴
	 */
	
	   //교수 - 학생 => 과제 리스트 => 1주차 과제를 클릭해서 => 과제 상세보기 제출
	   //1~12주차 제출 과제 리스트 가장 옆에 교수 - 채점 -> 
	
	   // L004 차시 
	   
	   
	//강의페이지에서 시험조회 페이지로 이동
	@GetMapping()
	public String getTestPage(@PathVariable String lectNo, Model model
							   ,Principal prin
							   ,Authentication authentication
											) {
		List<TestVO> attendeeTestList = service.getTestPage(lectNo);
	
		model.addAttribute("attendeeTestList", attendeeTestList);
		
		return "lecture/materials/attendTest/attendeeTest";
	}
	
	//교수가 시험조회 페이지에서 서술형 답안 리스트로 이동
	@GetMapping("professor/{testNo}")
	public String getProfessorTestPage2(@PathVariable String lectNo,@PathVariable String testNo, Model model
			,Principal prin
			,Authentication authentication
			) {
		model.addAttribute("lectNo",lectNo);
		model.addAttribute("testNo",testNo);
		return "lecture/materials/attendTest/professorTestList";
	}
	
	//교수가 시험조회 페이지에서 서술형 답안 리스트로 이동
	@GetMapping("professor/{testNo}/get")
	@ResponseBody
	public Map<String,Object> getProfessorTestPage(@PathVariable String lectNo, @PathVariable String testNo) {
	    Map<String, Object> map = new HashMap<>();
	    List<TestVO> professorTestList = service.getProfessorTestPage(testNo);
	    map.put("professorTestList", professorTestList);
	    return map;
	}
	
	@PostMapping("{queNo}/score")
	public ResponseEntity<Map<String, String>> updateAttendeeScore(@RequestBody QuestionAnswerVO qVo, 
	                                                               @PathVariable String lectNo,
	                                                               @PathVariable String queNo) {
	    Map<String, String> response = new HashMap<>();
	    
	    try {
	        Integer res = service.professorUpdateAttendeeScore(qVo);
	        
	        if (res > 0) {
	            response.put("status", "success");
	            return ResponseEntity.ok(response);
	        } else {
	            response.put("status", "fail");
	            return ResponseEntity.ok(response);
	        }
	    } catch (Exception e) {
	        response.put("status", "error");
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
	    }
	}

	
	
	
	
	//학생이 시험페이지로 이동
	@GetMapping("attendeeTest/{testNo}")
	public String getTest(
			
			@PathVariable String lectNo,@PathVariable String testNo, Model model ,Principal prin) {
		
		//추후에 수정하기
//		testNo="TEST011";
//		log.info("＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠{}",testNo);
		//로그인 한 계정의 아이디를 가져와야함
//		String stuId = "2024100001";
		String stuId = prin.getName(); //2024100001
		String lvn = "";
		
		
		//새로고침 한번에 기록 한번이라 주석으로 묶어둠
		Integer newRecord=service.createRecord(testNo, stuId);
		if(newRecord != null && newRecord != 0) {
			TestVO studentTestVo = testService.selectTestOne(testNo);
			studentTestVo.setLectNo(lectNo);
					log.info("♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣{}",studentTestVo);
			QuestionVO questionForm = new QuestionVO();
			model.addAttribute("studentTestVo", studentTestVo);
			model.addAttribute("newQuestion", questionForm); // 폼 바인딩용
			
			lvn = "/attendTest/attendeeTestForm"; //성공하면 새 시험 폼 출력
		}else {
			lvn = ""; //실패시 보낼 곳 
		}

//		lvn = "/attendTest/attendeeTestForm"; //성공하면 새 시험 폼 출력
//		TestVO studentTestVo = testService.selectTestOne(testNo);
//		studentTestVo.setLectNo(lectNo);
//		QuestionVO questionForm = new QuestionVO();
//		
//		model.addAttribute("studentTestVo", studentTestVo);
//		model.addAttribute("newQuestion", questionForm); // 폼 바인딩용
		
		return lvn;
		
	}
	//문제 채점하기
//	action="/yguniv/attendeeTest/L004/attendeeTest/TEST004"
	@PostMapping("attendeeTest/{testNo}")
	@ResponseBody
	public Map<String, Object> scoreCheck(
			Principal prin,
			@PathVariable String testNo ,@PathVariable String lectNo
			,@RequestBody List<QuestionAnswerVO> QuestionAnswerVO) {
		// 입력한 답가져온후 내보내기
		//학생이 제출을 누르면 테스트 번호에 등록된 정답과 비교한다. - service에서 처리하기
		//로그인 한 계정의 아이디를 가져와야함
	 
//		String stuId = "2024100001";
		String stuId = prin.getName(); //2024100001
		
		log.info("＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠＠{}",QuestionAnswerVO);
		
		QuestionAnswerVO.forEach(que->{
					que.setLectNo(lectNo);
					que.setStuId(stuId);
					que.setTestNo(testNo);
				});
		

		Integer res = service.questionScoreCheck(testNo, QuestionAnswerVO);
		
		HashMap<String , Object> map = new HashMap<String, Object>();
		
		if(res!=null&&res!=0) {
			map.put("result", "ok");			
		}else {
			map.put("result", "no");						
		}
		
		
		return map;
	}
	
	
}
































