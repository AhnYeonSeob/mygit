package kr.or.ddit.yguniv.person.controller;

import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.yguniv.commons.enumpkg.ServiceResult;
import kr.or.ddit.yguniv.commons.exception.PKNotFoundException;
import kr.or.ddit.yguniv.paging.PaginationInfo;
import kr.or.ddit.yguniv.paging.SimpleCondition;
import kr.or.ddit.yguniv.paging.renderer.BootStrapPaginationRenderer;
import kr.or.ddit.yguniv.paging.renderer.DefaultPaginationRenderer;
import kr.or.ddit.yguniv.paging.renderer.PaginationRenderer;
import kr.or.ddit.yguniv.person.service.PersonService;
import kr.or.ddit.yguniv.vo.EmployeeVO;
import kr.or.ddit.yguniv.vo.PersonVO;
import kr.or.ddit.yguniv.vo.ProfessorVO;
import kr.or.ddit.yguniv.vo.StudentVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/person")
@Controller
@RequiredArgsConstructor
public class personController {
	
	private final PersonService service;
	
	public static final String MODELNAME = "person";
	
	@ModelAttribute(MODELNAME)
	public PersonVO member() {
		return new PersonVO();
	}
	
	@GetMapping("new")
	public String createForm() {
	    return "person/personForm"; // 정적 리소스 HTML 파일로 리다이렉트
	}

	
//	 @GetMapping("/updateform/{personId}")
//	    public String getUpdateForm(@RequestParam("id") String personId, Model model) {
//	        // 데이터베이스에서 personId에 해당하는 사용자 정보를 가져옴
//	        PersonVO person = service.readPerson(personId);
//
//	        // 모델에 데이터 추가
//	        model.addAttribute("person", person);
//
//	        // personUpdate.jsp 반환
//	        return "person/personUpdate";
//	    }
	
	@GetMapping("list")
	public String selectlist(
			@RequestParam(required = false, defaultValue = "1") int page,
			@ModelAttribute("condition") SimpleCondition simpleCondition
			, Model model
) {

	    // 페이징 및 검색 조건 설정
	    PaginationInfo<PersonVO> paging = new PaginationInfo<>();
	    paging.setCurrentPage(page);
	    paging.setSimpleCondition(simpleCondition);

	    // 목록 조회
	    model.addAttribute("list", service.readPersonList(paging));

	    // 페이지네이션 렌더링
	    PaginationRenderer renderer = new BootStrapPaginationRenderer();
	    model.addAttribute("pagingHTML", renderer.renderPagination(paging, "fnPaging"));

	    return "person/personList";
	}

	
	//생성
	//
	@PostMapping()
	public String create() {
		return "person/personDetail";
	}
	
	
	@GetMapping("detail/{personId}")
	@ResponseBody
	public PersonVO detailperson(@PathVariable String personId, Model model) {
	    PersonVO person = service.readPerson(personId);

	    if (person == null) {
	        throw new PKNotFoundException("사용자를 찾을 수 없습니다.");
	    }
	    if(person.getProfessor()!=null) {
	    	ProfessorVO professor = person.getProfessor();
	    	professor.setProfeId(person.getId());
	    	log.info("professor:{}", professor);
	    	service.selectProfessorDetail(professor);
	    	
	    }

	    return person; 
	}

	
	@PostMapping("create")
	public String insertPersonAndUser(PersonVO person, RedirectAttributes redirectAttributes) {
	    try {
	        ServiceResult res = service.createPerson(person);

	        if (res == ServiceResult.PKDUPLICATED) {
	            redirectAttributes.addFlashAttribute("message", "아이디 중복, 바꾸셈.");
	            return "redirect:/person/new";  // 리다이렉트 경로 변경
	        }

	        System.out.println("Person inserted successfully!");

	        // 교수 정보 삽입
	        if (person.getProfessor() != null) {
	            ProfessorVO professorVO = person.getProfessor();
	            professorVO.setProfeId(person.getId());
	            service.insertProfessor(professorVO);
	        }

	        // 직원 정보 삽입
	        if (person.getEmployee() != null) {
	            EmployeeVO employeeVO = person.getEmployee();
	            employeeVO.setEmpId(person.getId());
	            service.insertEmployee(employeeVO);
	        }

//	        // 학생 정보 삽입 (추가적인 로직 필요 시)
//	        if (person.getStudent() != null) {
//	            StudentVO studentVO = person.getStudent();
//	            studentVO.setStudId(person.getId());
//	            service.insertStudent(studentVO);
//	        }

	        redirectAttributes.addFlashAttribute("message", "사용자가 성공적으로 추가되었습니다.");
	        return "redirect:/person/list"; 

	    } catch (Exception e) {
	        redirectAttributes.addFlashAttribute("errorMessage", "오류가 발생했습니다. 다시 시도해주세요.");
	        return "redirect:/person/personForm";  
	    }
	}

	//수정폼
	@GetMapping("editform/{personId}")
	@ResponseBody
	public PersonVO updateperson(@PathVariable String personId, Model model) {
		
		PersonVO person = service.readPerson(personId);
		
		if(person == null) {
			throw new PKNotFoundException();
		}
		
		return person;
	
	}
	//수정
	@PutMapping("edit/{personId}")
	@ResponseBody
	public ServiceResult saveUpdate(@PathVariable String personId, @RequestBody PersonVO updatedPerson) {
	    ServiceResult result = service.modifyPerson(updatedPerson); // 수정된 PersonVO 객체 전달
	    
	    if (result == ServiceResult.FAIL) {
	        throw new PKNotFoundException();
	    }

	    // 수정이 성공적일 경우 ServiceResult OK 반환
	    return result;
	}
	
	//비밀번호 초기화 (수정)
	@PutMapping("pwedit/{personId}")
	@ResponseBody
	public ServiceResult updatePw(@PathVariable String personId, @RequestBody PersonVO updatedPerson) {
	    ServiceResult result = service.updatePw(updatedPerson); // 수정된 PersonVO 객체 전달
	    
	    if (result == ServiceResult.FAIL) {
	        throw new PKNotFoundException();
	    }

	    // 수정이 성공적일 경우 ServiceResult OK 반환
	    return result;
	}
	
	
		
	//사용자 삭제(Y/N여부)
	@PutMapping("delete/{personId}")
	@ResponseBody
	public ServiceResult deletePerson(@PathVariable()String personId, @RequestBody PersonVO updatedPerson) {
		ServiceResult result = service.removePerson(updatedPerson);
		
		if(result == ServiceResult.FAIL) {
			throw new PKNotFoundException();
		}
		return result;
	}
	
	//교수 insert
	@PostMapping("newpro")
	public String professorcreateForm() {
		return "professor/professorInsert";
	}
	


}






