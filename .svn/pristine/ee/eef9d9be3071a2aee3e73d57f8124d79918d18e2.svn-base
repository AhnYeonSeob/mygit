import {
	ClassicEditor,
	SimpleUploadAdapter,
	Bold,
	Italic,
	Underline,
	BlockQuote,
	Essentials,
	Heading,
	Image,
	ImageUpload,
	Link,
	List,
	MediaEmbed,
	Table,
	TableToolbar,
	FontSize,
	FontFamily,
	FontColor,
	Undo
} from '../../../resources/js/ckeditor5/ckeditor5.js';


// 강의 입장 버튼 클릭
window.fnLectOrderDetail = async function(btn){
	let $tr = $(btn).parents('.orderLecture');
	let targetDate = new Date();
	let startDate = new Date($tr.find('.sectDt').text());
	let endDate = new Date($tr.find('.sectEt').text());
	endDate.setDate(endDate.getDate() + 1); 
	
	if (!(targetDate.getTime() >= startDate.getTime() && targetDate.getTime() <= endDate.getTime())) {
	    await swal({
			title: "학습기간이 아닙니다",
			text: "시청시간이 출석시간으로 인정되지 않습니다",
			icon: "warning",
			button: "확인"
		});
	}
	location.href = `${$('#cp').val()}/lecture/${$('#lectNo').val()}/materials/${$tr.data('weekCd')}/${$tr.data('lectOrder')}/viewer`;
}	

document.addEventListener("DOMContentLoaded", ()=>{
	axios.get(`${cp.value}/commoncode/ETIME`)
	.then(({data})=>{
		$('.dataSectEtime').append('<option selected label="교시선택"/>');
		data.forEach(v=>{
			$('.dataSectEtime').append(`<option value="${v.cocoCd}" label="${v.cocoStts}">`)
		});
	});
	
	axios.get(`${cp.value}/commoncode/classRoom`)
	.then(({data})=>{
		$('.dataCroomCd').append('<option selected label="강의실선택"/>');
		data.forEach(v=>{
			$('.dataCroomCd').append(`<option value="${v.croomCd}" label="${v.croomPstn}">`)
		});
	});
	
	// 주차 공통 코드 리스트 불러오기
	const getWeek = function(){
		axios.get(`${cp.value}/commoncode/WEEK`)
		.then(({data})=>{
			$("#weekCd").empty();
			$("#weekCd").append('<option selected label="주차선택"/>');
			leweNm.value = "";
			data.forEach(v=>{
				if($(`.weekCd[data-week-cd="${v.cocoCd}"]`).length==0){
					$("#weekCd").append(`<option value="${v.cocoCd}" label="${v.cocoStts}">`);
				}
			});
		});
	};
	
	// 차시 주차 공통 코드 추가하기
	const getOrderWeek = function(){
		$(".dataWeekCd").empty();
		$(".dataWeekCd").append('<option selected label="등록주차선택"/>');
		document.querySelectorAll('.weekCd').forEach(v=>{
			$('.dataWeekCd').append(`<option value="${$(v).data('weekCd')}" label="${$(v).find('.cocoStts').text()}">`);
		});
	};
	
	$("#insertWeekModal").on('show.bs.modal', function(){
		getWeek();
		getOrderWeek();
	});
	
	$("#insertWeekModal").on('hidden.bs.modal', function(){
		document.getElementById("insertDataForm").reset();
		document.getElementById("output").textContent = '0';
	});
	
	// 추가 모달 주차/차시 선택
	$('input[type="radio"][name="insertOption"]').on('change', function(){
		$('#insertWeekDiv').toggle();
		$('#insertOrderDiv').toggle();
	})
	
	// 주차 추가 버튼 클릭
	document.querySelector('.week-insert-btn')?.addEventListener('click', function(){
		axios.post(`${cp.value}/lecture/${lectNo.value}/materials/new`
		, {
			weekCd: $('#weekCd').val(),
			leweNm: $('#leweNm').val()
		}).then(resp=>{
			swal({
				title: "추가완료",
				text: "주차가 성공적으로 추가되었습니다",
				icon: "success",
				button: "확인"
			}).then(()=>location.reload());
		}).catch(err=>{
			swal({
				title: "추가실패",
				text: err.response.data.message,
				icon: "error",
				button: "확인"
			});
		});
	});
	
	// 주차 수정 버튼 클릭
	$(document).on('click', '.week-update-btn', function(){
		let $tr = $(this).parents('tr');
		$tr.find('button').toggle();
		let $td = $tr.find('.leweNm');
		$td.html(`<input class="form-control" type="text" value="${$td.text()}" data-origin="${$td.text()}"/>`);	
	});
	
	// 주차 수정 저장 버튼 클릭
	$(document).on('click', '.week-update-save-btn', function(){
		let $tr = $(this).parents('tr');
		let $td = $tr.find('.leweNm');
		let $input = $td.find('input');
		axios.put(`${cp.value}/lecture/${lectNo.value}/materials/${$tr.data("weekCd")}/edit`
			, {leweNm: $input.val()})
		.then(resp=>{
			swal({
				title: "수정완료",
				text: "주차명이 성공적으로 수정되었습니다",
				icon: "success",
				button: "확인"
			});
			$td.text($input.val());
		}).catch(err=>{
			swal({
				title: "수정실패",
				text: err.response.data.message,
				icon: "error",
				button: "확인"
			});
			$td.text($input.data("origin"));
		});
		$tr.find('button').toggle();
	});
	
	// 주차 수정 취소 버튼 클릭
	$(document).on('click', '.week-update-cancel-btn', function(){
		let $tr = $(this).parents('tr');
		$tr.find('button').toggle();
		let $td = $tr.find('.leweNm');
		let $input = $td.find('input');
		$td.text($input.data("origin"));
	});
	
	// 주차 삭제 버튼 클릭
	$(document).on('click', '.week-delete-btn', function(){
		let $tr = $(this).parents('tr');
		swal({
			title: "정말로 삭제하시겠습니까?",
			text: "주차를 삭제하면 주차에 해당하는 차시까지 같이 삭제됩니다",
			icon: "warning",
			buttons: ["취소", "삭제"],
			dangerMode: true,
		}).then(btnVal=>{
			if(btnVal){
				axios.delete(`${cp.value}/lecture/${lectNo.value}/materials/${$tr.data("weekCd")}`)
				.then(resp=>{
					swal({
						title: "삭제완료",
						text: "주차가 성공적으로 삭제되었습니다",
						icon: "success",
						button: "확인"
					});
					// 삭제 후 처리(주차 정보 삭제, 하위 차시 삭제, 차시 추가 버튼 삭제)
					$(`.delWeek[data-week-cd="${$tr.data('weekCd')}"]`).remove();
				}).catch(err=>{
					swal({
						title: "삭제실패",
						text: err.response.data.message,
						icon: "error",
						button: "확인"
					});
				})
			}
		});
	});
	
	const insertDataForm = document.forms["insertDataForm"];
	const updateDataForm = document.forms["updateDataForm"];
	let formArray = [insertDataForm, updateDataForm]
	
	formArray.forEach(form=>{
		if(form){
			// 강의차시 검증
			form.lectOrder.addEventListener('change', function(){
				let input = form.lectOrder.value;
				if(input<0 || Number(input)>lectSession.value){
					swal({
						title: "입력오류",
						text: `강의 차시는 1 ~ ${lectSession.value} 사이의 값이어야 합니다`,
						icon: "error",
						button: "확인"
					});
					form.lectOrder.value = '';
				}
				if($(`.lectOrder[data-lect-order="${input}"]`).length > 0 && this.dataset['origin'] != input){
					swal({
						title: "입력오류",
						text: "해당 강의 차시는 이미 등록되었습니다",
						icon: "error",
						button: "확인"
					});
					form.lectOrder.value = '';
				}
			});
			
			// 학습 시작일 검증
			form.sectDt.addEventListener('input', function(){
				if(form.sectEt?.value){
					let sectDt = new Date(form.sectDt.value);
					let sectEt = new Date(form.sectEt.value);
					if(sectDt - sectEt > 0){
						swal({
							title: "입력오류",
							text: "학습시작일이 학습종료일 이후에 올 수 없습니다",
							icon: "error",
							button: "확인"
						});
						form.sectDt.value = form.sectEt.value;
					}
				}
			});
			
			// 학습 종료일 검증
			form.sectEt?.addEventListener('input', function(){
				if(form.sectDt.value){
					let sectDt = new Date(form.sectDt.value);
					let sectEt = new Date(form.sectEt.value);
					if(sectDt - sectEt > 0){
						swal({
							title: "입력오류",
							text: "학습종료일이 학습시작일 이전에 올 수 없습니다",
							icon: "error",
							button: "확인"
						});
						form.sectEt.value = form.sectDt.value;
					}
				}
			});
		}
	});
	
	// 차시 추가 버튼 클릭
	document.querySelector('.data-insert-btn')?.addEventListener('click', function(){
		let formData = new FormData(insertDataForm);
		formData.set('sectDt', insertDataForm.sectDt.value.replaceAll('-', ''));
		if(insertDataForm.sectEt){
			formData.set('sectEt', insertDataForm.sectEt.value.replaceAll('-', ''));
		}else{
			formData.set('sectEt', null);
		}
		
		let url = `${cp.value}/lecture/${lectNo.value}/materials/orderdata/online`;
		if(updateDataForm.sectEtime){
			url = `${cp.value}/lecture/${lectNo.value}/materials/orderdata/offline`;
		}
		
		axios.post(url
		, formData)
		.then(resp=>{
			swal({
				title: "추가완료",
				text: "차시가 성공적으로 추가되었습니다",
				icon: "success",
				button: "확인"
			}).then(()=>location.reload());
		}).catch(err=>{
			swal({
				title: "추가실패",
				text: err.response.data.message,
				icon: "error",
				button: "확인"
			});
		});
	});
	
	// 차시 수정 버튼 클릭
	$(document).on('click', '.data-update-btn', function(){
		let $orderLecture = $(this).parents('.orderLecture');
		getOrderWeek();
		axios.get(`${cp.value}/lecture/${lectNo.value}/materials/${$orderLecture.data("weekCd")}/${$orderLecture.find('.lectOrder').data('lectOrder')}`)
		.then(resp=>{
			let order = resp.data.orderLectureDataVO;
			let updateDataForm = document.forms['updateDataForm'];
			updateDataForm.weekCd.value = order.weekCd;
			updateDataForm.weekCd.setAttribute('data-origin', order.weekCd);
			updateDataForm.lectOrder.value = order.lectOrder;
			updateDataForm.lectOrder.setAttribute('data-origin', order.lectOrder);
			updateDataForm.sectNm.value = order.sectNm;
			updateDataForm.sectDt.value = order.sectDt.replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3');
			if(updateDataForm.sectEt){
				updateDataForm.sectEt.value = order.sectEt.replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3');
				$('#updateOutput').text(order.sectIdnty);
				updateDataForm.sectIdnty.value = order.sectIdnty;
				updateDataForm.uploadedFiles.value = order.atchFileDetailList[0]?.orignlFileNm ?? "등록된 강의영상이 없습니다";
			}
			if(updateDataForm.sectEtime){
				updateDataForm.sectEtime.value = order.sectEtime;
				updateDataForm.croomCd.value = order.croomCd;
			}
			$('#updateDataModal').modal('show');
		});
	});
	
	// 차시 수정 저장 버튼 클릭
	document.querySelector(".data-update-submit-btn")?.addEventListener('click', function(){
		let form = document.forms['updateDataForm'];
		let formData = new FormData(form);
		formData.set('sectDt', form.sectDt.value.replaceAll('-', ''));
		if(updateDataForm.sectEt){
			formData.set('sectEt', updateDataForm.sectEt.value.replaceAll('-', ''));
		}else{
			formData.set('sectEt', null);
		}
		
		axios.post(`${cp.value}/lecture/${lectNo.value}/materials/${form.weekCd.dataset["origin"]}/${form.lectOrder.dataset["origin"]}/edit` 
		, formData)
		.then(resp=>{
			swal({
				title: "수정완료",
				text: "차시가 성공적으로 추가되었습니다",
				icon: "success",
				button: "확인"
			}).then(()=>location.reload());
		}).catch(err=>{
			swal({
				title: "수정실패",
				text: err.response.data.message,
				icon: "error",
				button: "확인"
			});
		});
	});
	
	// 차시 삭제 버튼 클릭
	$(document).on('click', '.data-delete-btn', function(){
		let $tr = $(this).parents('tr');
		swal({
			title: "정말로 삭제하시겠습니까?",
			text: "차시를 삭제하면 다시 복구할 수 없습니다",
			icon: "warning",
			buttons: ["취소", "삭제"],
			dangerMode: true,
		}).then(btnVal=>{
			if(btnVal){
				axios.delete(`${cp.value}/lecture/${lectNo.value}/materials/${$tr.data("weekCd")}/${$tr.data("lectOrder")}`)
				.then(resp=>{
					swal({
						title: "삭제완료",
						text: "차시가 성공적으로 삭제되었습니다",
						icon: "success",
						button: "확인"
					});
					// 삭제 후 처리
					$(`.delWeek[data-lect-order="${$tr.data('lectOrder')}"]`).remove();
				}).catch(err=>{
					swal({
						title: "삭제실패",
						text: err.response.data.message,
						icon: "error",
						button: "확인"
					});
				})
			}
		});
	});
	
	
	
	/* 공결 신청 등록 ---------------------------------------------------------------------------*/
	// 강의 출결 조회 중 공결 신청 등록버튼
	// 'atnd-insert-btn' 클래스를 가진 모든 버튼을 찾습니다.
	const buttons = document.querySelectorAll('.atnd-insert-btn');

	// 각 버튼에 클릭 이벤트 리스너를 추가합니다.
	buttons.forEach(button => {
	    button.addEventListener('click', function () {
	        // 버튼의 부모 <tr> 요소를 찾습니다.
	        const tr = button.closest('tr');
	
	        // <tr> 요소가 없으면 실행하지 않고 종료합니다.
	        if (!tr) {
	            console.warn('해당 버튼은 <tr> 요소에 속해 있지 않습니다.');
	            return;
	        }
	
	        // <tr> 요소에서 data- 속성 값을 가져옵니다.
	        const lectOrder = tr.dataset['lectOrder'];
	        const atndStts = tr.dataset['atndStts'];
	        const weekCd = tr.dataset['weekCd'];
	
	        // 강의 차수 (lectOrder)와 상태 (atndStts) 데이터를 모달에 추가합니다.
	        const modal = document.querySelector('#staticBackdrop');
	        if (modal) {
	            modal.querySelector('#lectOrder').textContent = lectOrder || '';
	            modal.querySelector('#absenceStatus').textContent = atndStts || '';
	            modal.querySelector('#weekCd').textContent = weekCd || '';
	        } else {
	            console.error('모달 요소를 찾을 수 없습니다.');
	        }
	    });
	});

	
	var contextPath = document.querySelector('#form-table').dataset['path'];
	var editorInstance;
	var updateInstance;
	const csrfMetaTag = document.querySelector('meta[name="csrf-token"]');
	const csrfToken = csrfMetaTag ? csrfMetaTag.getAttribute('content') : null;
	// CKEditor 초기화
	ClassicEditor.create(document.querySelector('#editor'), {
	    licenseKey: 'GPL',
	    plugins: [
	        Essentials, Bold, Italic, Underline, Link, Image, ImageUpload,
	        List, BlockQuote, Heading, MediaEmbed, Table, TableToolbar,
	        FontSize, FontFamily, FontColor, Undo, SimpleUploadAdapter
	    ],
	    toolbar: [
	        'undo', 'redo', '|', 'bold', 'italic', 'underline', '|', 'link', 'imageUpload', '|',
	        'bulletedList', 'numberedList', '|', 'blockquote', 'insertTable', '|',
	        'fontSize', 'fontFamily', 'fontColor', '|', 'mediaEmbed'
	    ],
	    language: 'ko',
	    simpleUpload: {
	        uploadUrl: `${contextPath}/imageUpload`,
	        headers: csrfToken ? { 'X-CSRF-TOKEN': csrfToken } : {},
	    }
	})
	.then(editor => {
	    window.editorInstance = editor; // 전역으로 설정
	    editor.editing.view.change(writer => {
	        writer.setStyle('height', '400px', editor.editing.view.document.getRoot());
	    });
	})
	.catch(error => {
	    console.error("CKEditor 초기화 실패:", error);
	});
	
	// CKEditor 초기화
	ClassicEditor.create(document.querySelector('#updateEditor'), {
	    licenseKey: 'GPL',
	    plugins: [
	        Essentials, Bold, Italic, Underline, Link, Image, ImageUpload,
	        List, BlockQuote, Heading, MediaEmbed, Table, TableToolbar,
	        FontSize, FontFamily, FontColor, Undo, SimpleUploadAdapter
	    ],
	    toolbar: [
	        'undo', 'redo', '|', 'bold', 'italic', 'underline', '|', 'link', 'imageUpload', '|',
	        'bulletedList', 'numberedList', '|', 'blockquote', 'insertTable', '|',
	        'fontSize', 'fontFamily', 'fontColor', '|', 'mediaEmbed'
	    ],
	    language: 'ko',
	    simpleUpload: {
	        uploadUrl: `${contextPath}/imageUpload`,
	        headers: csrfToken ? { 'X-CSRF-TOKEN': csrfToken } : {},
	    }
	})
	.then(updateEditor => {
	    window.updateInstance = updateEditor; // 전역으로 설정
	    updateEditor.editing.view.change(writer => {
	        writer.setStyle('height', '400px', updateEditor.editing.view.document.getRoot());
	    });
	})
	.catch(error => {
	    console.error("CKEditor 초기화 실패:", error);
	});

	
	// CKEditor 초기화
	$('#staticBackdrop').on('hide.bs.modal', function() {
	    if (editorInstance) {
	        editorInstance.setData(''); // 초기화
	    } else {
	        console.warn("editorInstance가 없습니다. 초기화할 수 없습니다.");
	    }
	});
	
	if (!editorInstance) {
	    console.log("CKEditor 초기화 시점 확인 필요");
	    ClassicEditor.create(document.querySelector('#absenceReasonEditor'))
	        .then(editor => {
	            editorInstance = editor;
	            console.log("CKEditor가 초기화되었습니다:", editorInstance);
	        })
	        .catch(error => console.error("CKEditor 초기화 실패:", error));
	}

	// 버튼 클릭 시 데이터 수집 및 알림창 출력
	document.getElementById('approveButton').addEventListener('click', function() {
		if (editorInstance) {
			
			var absenceResn = editorInstance.getData();
			const lectOrder = document.querySelector('#lectOrder').textContent;
			const studentId = document.querySelector('#studentId').textContent;
			const weekCd = document.querySelector('#weekCd').textContent;
			const lectNo = document.querySelector('#lectNo').value;  // `lectNo` 요소에서 값 가져오기
			
			// 수집한 데이터를 VO 객체로 만들어서 전송
			const absenceData = {
				lectNo: lectNo,           // 강의번호
				lectOrder: lectOrder,     // 강의 차수
				stuId: studentId,     	// 학번
				weekCd: weekCd          // 주차 코드
			};
			
			let absenseForm = document.querySelector('#form-table');
			let formData = new FormData(absenseForm);
			
			for(let key in absenceData){
				formData.append(key, absenceData[key]);
			}
			
			formData.set('absenceResn', absenceResn);
			
			// 콘솔에도 출력 (디버깅용)
			formData.forEach((v, k)=>{
				console.log(v, k)
			});
			
	        let fileInput = formData.get('uploadFiles'); // 파일을 가져옴
	
	        // 파일이 비어있는지 확인
	        if (fileInput && fileInput.name.trim() === '') {
	            swal("알림", "첨부파일이 비어있습니다", "warning");
	            return; // 파일 이름이 비어 있으면 데이터 전송을 막음
	        }
			
			console.log("url 경로 표시 : ", `${contextPath}/lecture/${lectNo}/materials/new/absence`)
			
			fetch(`${contextPath}/lecture/${lectNo}/materials/new/absence`, {
				method: 'POST',
				body: formData
			})
			.then(response => response.json())
			.then(data => {
				console.log('Success:', data);
                // 성공 메시지 표시 (SweetAlert)
		        swal("성공", "공결 사유가 정상적으로 등록되었습니다.", "success")
		            .then(() => {
		                // 알림창이 닫힌 후 페이지 새로고침
		                window.location.reload();
		            });
		
		        // 모달 닫기
		        $('#staticBackdropEdit').modal('hide');
			})
			.catch(error => {
				console.error('Error:', error);
				swal("오류", "데이터 전송 중 문제가 발생했습니다. 다시 시도해주세요.", "error");
			});
		}
	});	
	
	document.querySelectorAll('.editBtn').forEach(button => {
	    button.addEventListener('click', function () {
	        const absenceCd = this.getAttribute('data-absenceCd');
	        if (!absenceCd) {
	            console.error("absenceCd가 없습니다.");
	            return;
	        }
	
	        // AJAX 요청으로 서버에 absenceCd를 보내고 데이터 받아오기
	        fetch(`${contextPath}/lecture/${lectNo.value}/absence/${absenceCd}`)
	            .then(response => response.json())
	            .then(data => {
	                console.log("서버에서 받은 데이터:", data); // 데이터 구조를 콘솔로 출력
						
	                // 서버로부터 받은 데이터를 모달에 업데이트
	                document.getElementById('lectOrder2').innerText = data.lectOrder;
	                document.getElementById('studentName2').innerText = data.studentVO.nm;
	                document.getElementById('studentId2').innerText = data.stuId;
	                document.getElementById('absenceStatus2').innerText = data.atst;
					//document.getElementById('absenceCd2').value = absenceCd; 
					
	                if (editorInstance) {
                    	editorInstance.setData(data.absenceResn || ''); // 데이터 설정
	                } else {
	                    console.error("editorInstance가 초기화되지 않았습니다.");
	                }
	
					document.getElementById('absenceCd2').value = absenceCd;
					console.log("서버에서 받은 데이터:", data);
	            })
	            .catch(error => {
	                console.error('Error:', error);
	            });
	    });
	});

	// 삭제 버튼 눌렀을때 이벤트
	document.querySelectorAll('.absenceDeleteBtn').forEach(button => {
	    button.addEventListener('click', function () {
	        const absenceCd = document.getElementById('absenceCd2')?.value;
	
	        if (!absenceCd) {
	            swal("오류 발생", "공결 처리 번호가 비어 있습니다.", "error");
	            return;
	        }
	
	        console.log('absenceCd to send:', absenceCd); // absenceCd 확인
	
	        swal({
	            title: "정말 삭제하시겠습니까?",
	            text: "이 작업은 되돌릴 수 없습니다.",
	            icon: "warning",
	            buttons: true,
	        }).then((willDelete) => {
	            if (willDelete) {
	                fetch(`${contextPath}/lecture/${lectNo.value}/absence/drop`, {
	                    method: 'PUT',
	                    headers: {
	                        'Content-Type': 'application/json',
	                    },
	                    body: JSON.stringify({ absenceCd }), // JSON 확인
	                })
	                .then(response => {
	                    console.log('Response status:', response.status);
	                    if (!response.ok) {
	                        throw new Error(`HTTP error! status: ${response.status}`);
	                    }
	                    return response.json();
	                })
	                .then(data => {
	                    console.log('Response data:', data);
	                    swal("삭제 완료!", "삭제되었습니다.", "success")
	                        .then(() => window.location.reload());
	                })
	                .catch(error => {
	                    console.error("Fetch error:", error);
	                    swal("오류 발생!", "삭제 중 문제가 발생했습니다.", "error");
	                });
	            }
	        });
	    });
	});

});




















