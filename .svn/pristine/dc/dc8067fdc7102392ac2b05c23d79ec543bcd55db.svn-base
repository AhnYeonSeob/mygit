package kr.or.ddit.yguniv.noticeboard.controller;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.yguniv.noticeboard.exception.BoardException;
import kr.or.ddit.yguniv.noticeboard.service.NoticeBoardService;
import kr.or.ddit.yguniv.paging.PaginationInfo;
import kr.or.ddit.yguniv.paging.SimpleCondition;
import kr.or.ddit.yguniv.paging.renderer.BootStrapPaginationRenderer;
import kr.or.ddit.yguniv.paging.renderer.PaginationRenderer;
import kr.or.ddit.yguniv.vo.NoticeBoardVO;

/**
 * @author AYS
 * lvn에 ?는 디테일로 갈 수 있게 해당넘버를 붙여줘야함
 * redirect: 도 고려해야할 것 같음
 */
@Controller
@RequestMapping("/yguniv/noticeboard")
public class NoticeboardController {
	public static final String MODELNAME = "noticeboard";
	
	@Autowired
	private NoticeBoardService service;
	
	@ModelAttribute(MODELNAME)
	public NoticeBoardVO board() {
		return new NoticeBoardVO();
	}
	
	//게시글전체조회(검색어 있는지 없는지 ntcNm 제목 / ntcDesc 내용)
	@GetMapping
	public String selectList(
		@RequestParam(required = false, defaultValue = "1") int page
		, @ModelAttribute("condition") SimpleCondition simpleCondition
		, Model model
	) {
		PaginationInfo<NoticeBoardVO> paging = new PaginationInfo<>();
		paging.setCurrentPage(page);
		paging.setSimpleCondition(simpleCondition);
		model.addAttribute("boardList", service.readNoticeBoardListPaging(paging));
		PaginationRenderer renderer = new BootStrapPaginationRenderer();
		
		//renderPagination 에는 페이징처리함수명 넣어야함 현재 fnPaging자리
		model.addAttribute("pagingHTML", renderer.renderPagination(paging, "fnPaging"));
			
		return "noticeboard/noticeboardList";
	}
	
	//게시글 생성폼이동
	@GetMapping("new")
	public String createForm() {
		
		return "noticeboard/noticeboardForm";
	}
	
	//게시글 생성
	@PostMapping()
	public String create( @ModelAttribute(MODELNAME) NoticeBoardVO noticeboard
			, BindingResult errors
			, RedirectAttributes redirectAttributes
			) {
		
		try {
			String lvn = null;
			if (!errors.hasErrors()) {
				service.createNoticeBoard(noticeboard);
				lvn = "redirect:/yguniv/noticeboard/" + noticeboard.getNtcCd();
			} else {
				redirectAttributes.addFlashAttribute(MODELNAME, noticeboard);
				redirectAttributes.addFlashAttribute(BindingResult.MODEL_KEY_PREFIX + MODELNAME, errors);
				lvn = "redirect:/yguniv/noticeboard/new";
			}
			return lvn;
		}catch (Throwable e) {
			throw new BoardException(e);
		}
	}
	
	//게시글상세조회
	@GetMapping("{ntcCd}")
	public String select(@PathVariable()int ntcCd, Model model) {
		
		NoticeBoardVO board = service.readNoticeBoard(ntcCd);
		model.addAttribute("noticeboard", board);
		
		return "noticeboard/noticeboardDetail";
	}
	//게시글수정폼이동
	@GetMapping("{ntcCd}/edit")
	public String updateForm(@PathVariable()int ntcCd) {
		
		return "noticeboard/noticeboardEditForm";
	}
	
	//게시글수정
	@PutMapping("{ntcCd}")
	public String update(@PathVariable()int ntcCd) {
		
		return "noticeboard/noticeboardDetail";
	}
	
	//게시글삭제
	@DeleteMapping("{ntcCd}")
	public String delete(@PathVariable()int ntcCd) {
		
		return "noticeboard/noticeboardList";
	}
	
	//캘린더연동처리
	public void addMyCalendar() {
		
	}
	
	
}
