/**
 * 
 */
// 강의 입장 버튼 클릭
async function fnLectOrderDetail(btn){
	let $tr = $(btn).parents('.orderLecture');
	let targetDate = new Date();
	let startDate = new Date($tr.find('.sectDt').text());
	let endDate = new Date($tr.find('.sectEt').text());
	endDate.setDate(endDate.getDate() + 1); 
	
	if (!(targetDate.getTime() >= startDate.getTime() && targetDate.getTime() <= endDate.getTime())) {
	    await swal({
			title: "학습기간이 아닙니다",
			text: "시청시간이 출석시간으로 인정되지 않습니다",
			icon: "warning",
			button: "확인"
		});
	}
	location.href = `${$('#cp').val()}/lecture/${$('#lectNo').val()}/materials/${$tr.data('weekCd')}/${$tr.data('lectOrder')}/viewer`;
}

document.addEventListener("DOMContentLoaded", ()=>{
	axios.get(`${cp.value}/commoncode/ETIME`)
	.then(({data})=>{
		$('.dataSectEtime').append('<option selected label="교시선택"/>');
		data.forEach(v=>{
			$('.dataSectEtime').append(`<option value="${v.cocoCd}" label="${v.cocoStts}">`)
		});
	});
	
	axios.get(`${cp.value}/commoncode/classRoom`)
	.then(({data})=>{
		$('.dataCroomCd').append('<option selected label="강의실선택"/>');
		data.forEach(v=>{
			$('.dataCroomCd').append(`<option value="${v.croomCd}" label="${v.croomPstn}">`)
		});
	});
	
	// 주차 공통 코드 리스트 불러오기
	const getWeek = function(){
		axios.get(`${cp.value}/commoncode/WEEK`)
		.then(({data})=>{
			$("#weekCd").empty();
			$("#weekCd").append('<option selected label="주차선택"/>');
			leweNm.value = "";
			data.forEach(v=>{
				if($(`.weekCd[data-week-cd="${v.cocoCd}"]`).length==0){
					$("#weekCd").append(`<option value="${v.cocoCd}" label="${v.cocoStts}">`);
				}
			});
		});
	};
	
	// 차시 주차 공통 코드 추가하기
	const getOrderWeek = function(){
		$(".dataWeekCd").empty();
		$(".dataWeekCd").append('<option selected label="등록주차선택"/>');
		document.querySelectorAll('.weekCd').forEach(v=>{
			$('.dataWeekCd').append(`<option value="${$(v).data('weekCd')}" label="${$(v).find('.cocoStts').text()}">`);
		});
	};
	
	$("#insertWeekModal").on('show.bs.modal', function(){
		getWeek();
		getOrderWeek();
	});
	
	$("#insertWeekModal").on('hidden.bs.modal', function(){
		document.getElementById("insertDataForm").reset();
		document.getElementById("output").textContent = '0';
	});
	
	// 추가 모달 주차/차시 선택
	$('input[type="radio"][name="insertOption"]').on('change', function(){
		$('#insertWeekDiv').toggle();
		$('#insertOrderDiv').toggle();
	})
	
	// 주차 추가 버튼 클릭
	document.querySelector('.week-insert-btn')?.addEventListener('click', function(){
		axios.post(`${cp.value}/lecture/${lectNo.value}/materials/new`
		, {
			weekCd: $('#weekCd').val(),
			leweNm: $('#leweNm').val()
		}).then(resp=>{
			swal({
				title: "추가완료",
				text: "주차가 성공적으로 추가되었습니다",
				icon: "success",
				button: "확인"
			}).then(()=>location.reload());
		}).catch(err=>{
			swal({
				title: "추가실패",
				text: err.response.data.message,
				icon: "error",
				button: "확인"
			});
		});
	});
	
	// 주차 수정 버튼 클릭
	$(document).on('click', '.week-update-btn', function(){
		let $tr = $(this).parents('tr');
		$tr.find('button').toggle();
		let $td = $tr.find('.leweNm');
		$td.html(`<input class="form-control" type="text" value="${$td.text()}" data-origin="${$td.text()}"/>`);	
	});
	
	// 주차 수정 저장 버튼 클릭
	$(document).on('click', '.week-update-save-btn', function(){
		let $tr = $(this).parents('tr');
		let $td = $tr.find('.leweNm');
		let $input = $td.find('input');
		axios.put(`${cp.value}/lecture/${lectNo.value}/materials/${$tr.data("weekCd")}/edit`
			, {leweNm: $input.val()})
		.then(resp=>{
			swal({
				title: "수정완료",
				text: "주차명이 성공적으로 수정되었습니다",
				icon: "success",
				button: "확인"
			});
			$td.text($input.val());
		}).catch(err=>{
			swal({
				title: "수정실패",
				text: err.response.data.message,
				icon: "error",
				button: "확인"
			});
			$td.text($input.data("origin"));
		});
		$tr.find('button').toggle();
	});
	
	// 주차 수정 취소 버튼 클릭
	$(document).on('click', '.week-update-cancel-btn', function(){
		let $tr = $(this).parents('tr');
		$tr.find('button').toggle();
		let $td = $tr.find('.leweNm');
		let $input = $td.find('input');
		$td.text($input.data("origin"));
	});
	
	// 주차 삭제 버튼 클릭
	$(document).on('click', '.week-delete-btn', function(){
		let $tr = $(this).parents('tr');
		swal({
			title: "정말로 삭제하시겠습니까?",
			text: "주차를 삭제하면 주차에 해당하는 차시까지 같이 삭제됩니다",
			icon: "warning",
			buttons: ["취소", "삭제"],
			dangerMode: true,
		}).then(btnVal=>{
			if(btnVal){
				axios.delete(`${cp.value}/lecture/${lectNo.value}/materials/${$tr.data("weekCd")}`)
				.then(resp=>{
					swal({
						title: "삭제완료",
						text: "주차가 성공적으로 삭제되었습니다",
						icon: "success",
						button: "확인"
					});
					// 삭제 후 처리(주차 정보 삭제, 하위 차시 삭제, 차시 추가 버튼 삭제)
					$(`.delWeek[data-week-cd="${$tr.data('weekCd')}"]`).remove();
				}).catch(err=>{
					swal({
						title: "삭제실패",
						text: err.response.data.message,
						icon: "error",
						button: "확인"
					});
				})
			}
		});
	});
	
	const insertDataForm = document.forms["insertDataForm"];
	const updateDataForm = document.forms["updateDataForm"];
	let formArray = [insertDataForm, updateDataForm]
	
	formArray.forEach(form=>{
		if(form){
			// 강의차시 검증
			form.lectOrder.addEventListener('change', function(){
				let input = form.lectOrder.value;
				if(input<0 || Number(input)>lectSession.value){
					swal({
						title: "입력오류",
						text: `강의 차시는 1 ~ ${lectSession.value} 사이의 값이어야 합니다`,
						icon: "error",
						button: "확인"
					});
					form.lectOrder.value = '';
				}
				if($(`.lectOrder[data-lect-order="${input}"]`).length > 0 && this.dataset['origin'] != input){
					swal({
						title: "입력오류",
						text: "해당 강의 차시는 이미 등록되었습니다",
						icon: "error",
						button: "확인"
					});
					form.lectOrder.value = '';
				}
			});
			
			// 학습 시작일 검증
			form.sectDt.addEventListener('input', function(){
				if(form.sectEt?.value){
					let sectDt = new Date(form.sectDt.value);
					let sectEt = new Date(form.sectEt.value);
					if(sectDt - sectEt > 0){
						swal({
							title: "입력오류",
							text: "학습시작일이 학습종료일 이후에 올 수 없습니다",
							icon: "error",
							button: "확인"
						});
						form.sectDt.value = form.sectEt.value;
					}
				}
			});
			
			// 학습 종료일 검증
			form.sectEt?.addEventListener('input', function(){
				if(form.sectDt.value){
					let sectDt = new Date(form.sectDt.value);
					let sectEt = new Date(form.sectEt.value);
					if(sectDt - sectEt > 0){
						swal({
							title: "입력오류",
							text: "학습종료일이 학습시작일 이전에 올 수 없습니다",
							icon: "error",
							button: "확인"
						});
						form.sectEt.value = form.sectDt.value;
					}
				}
			});
		}
	});
	
	// 차시 추가 버튼 클릭
	document.querySelector('.data-insert-btn')?.addEventListener('click', function(){
		let formData = new FormData(insertDataForm);
		formData.set('sectDt', insertDataForm.sectDt.value.replaceAll('-', ''));
		if(insertDataForm.sectEt){
			formData.set('sectEt', insertDataForm.sectEt.value.replaceAll('-', ''));
		}else{
			formData.set('sectEt', null);
		}
		
		let url = `${cp.value}/lecture/${lectNo.value}/materials/orderdata/online`;
		if(updateDataForm.sectEtime){
			url = `${cp.value}/lecture/${lectNo.value}/materials/orderdata/offline`;
		}
		
		axios.post(url
		, formData)
		.then(resp=>{
			swal({
				title: "추가완료",
				text: "차시가 성공적으로 추가되었습니다",
				icon: "success",
				button: "확인"
			}).then(()=>location.reload());
		}).catch(err=>{
			swal({
				title: "추가실패",
				text: err.response.data.message,
				icon: "error",
				button: "확인"
			});
		});
	});
	
	// 차시 수정 버튼 클릭
	$(document).on('click', '.data-update-btn', function(){
		let $orderLecture = $(this).parents('.orderLecture');
		getOrderWeek();
		axios.get(`${cp.value}/lecture/${lectNo.value}/materials/${$orderLecture.data("weekCd")}/${$orderLecture.find('.lectOrder').data('lectOrder')}`)
		.then(resp=>{
			let order = resp.data.orderLectureDataVO;
			let updateDataForm = document.forms['updateDataForm'];
			updateDataForm.weekCd.value = order.weekCd;
			updateDataForm.weekCd.setAttribute('data-origin', order.weekCd);
			updateDataForm.lectOrder.value = order.lectOrder;
			updateDataForm.lectOrder.setAttribute('data-origin', order.lectOrder);
			updateDataForm.sectNm.value = order.sectNm;
			updateDataForm.sectDt.value = order.sectDt.replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3');
			if(updateDataForm.sectEt){
				updateDataForm.sectEt.value = order.sectEt.replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3');
				$('#updateOutput').text(order.sectIdnty);
				updateDataForm.sectIdnty.value = order.sectIdnty;
				updateDataForm.uploadedFiles.value = order.atchFileDetailList[0]?.orignlFileNm ?? "등록된 강의영상이 없습니다";
			}
			if(updateDataForm.sectEtime){
				updateDataForm.sectEtime.value = order.sectEtime;
				updateDataForm.croomCd.value = order.croomCd;
			}
			$('#updateDataModal').modal('show');
		});
	});
	
	// 차시 수정 저장 버튼 클릭
	document.querySelector(".data-update-submit-btn")?.addEventListener('click', function(){
		let form = document.forms['updateDataForm'];
		let formData = new FormData(form);
		formData.set('sectDt', form.sectDt.value.replaceAll('-', ''));
		if(updateDataForm.sectEt){
			formData.set('sectEt', updateDataForm.sectEt.value.replaceAll('-', ''));
		}else{
			formData.set('sectEt', null);
		}
		
		axios.post(`${cp.value}/lecture/${lectNo.value}/materials/${form.weekCd.dataset["origin"]}/${form.lectOrder.dataset["origin"]}/edit` 
		, formData)
		.then(resp=>{
			swal({
				title: "수정완료",
				text: "차시가 성공적으로 추가되었습니다",
				icon: "success",
				button: "확인"
			}).then(()=>location.reload());
		}).catch(err=>{
			swal({
				title: "수정실패",
				text: err.response.data.message,
				icon: "error",
				button: "확인"
			});
		});
	});
	
	// 차시 삭제 버튼 클릭
	$(document).on('click', '.data-delete-btn', function(){
		let $tr = $(this).parents('tr');
		swal({
			title: "정말로 삭제하시겠습니까?",
			text: "차시를 삭제하면 다시 복구할 수 없습니다",
			icon: "warning",
			buttons: ["취소", "삭제"],
			dangerMode: true,
		}).then(btnVal=>{
			if(btnVal){
				axios.delete(`${cp.value}/lecture/${lectNo.value}/materials/${$tr.data("weekCd")}/${$tr.data("lectOrder")}`)
				.then(resp=>{
					swal({
						title: "삭제완료",
						text: "차시가 성공적으로 삭제되었습니다",
						icon: "success",
						button: "확인"
					});
					// 삭제 후 처리
					$(`.delWeek[data-lect-order="${$tr.data('lectOrder')}"]`).remove();
				}).catch(err=>{
					swal({
						title: "삭제실패",
						text: err.response.data.message,
						icon: "error",
						button: "확인"
					});
				})
			}
		});
	});
	
});











/* 공결 신청 등록*/



// 강의 출결 조회 중 공결 신청 등록버튼
document.addEventListener('DOMContentLoaded', function() {
  // 'btn btn-primary atnd-insert-btn' 클래스를 가진 모든 버튼을 찾습니다.
  const buttons = document.querySelectorAll('.btn.btn-primary.atnd-insert-btn');
   
  // 각 버튼에 클릭 이벤트 리스너를 추가합니다.
  buttons.forEach(button => {
    button.addEventListener('click', function() {
      // 버튼의 부모 <tr> 요소를 찾습니다.
      const tr = button.closest('tr');
      
      // <tr> 요소에서 data- 속성 값을 가져옵니다.
      const lectOrder = tr.getAttribute('data-lect-order');
      const atndStts = tr.getAttribute('data-atnd-stts');
      const weekCd = tr.getAttribute('data-week-cd');
      
	console.log(lectOrder);
	console.log(atndStts);
	console.log(weekCd);

      // 비동기 요청을 통해 데이터를 받아옵니다.
      fetch(`${cp.value}/lecture/${lectNo.value}/materials`)
        .then(response => response.text()) // 서버에서 JSON 형태로 데이터 받기
        .then(data => {
          // 모달 요소 찾기
          const modal = document.querySelector('#staticBackdrop');
          
          // 강의 차수 (lectOrder)와 상태 (atndStts) 데이터를 모달에 추가합니다.
          modal.querySelector('#lectOrder').textContent = `${lectOrder}`;
          modal.querySelector('#absenceStatus').textContent = `${atndStts}`;
		  modal.querySelector('#weekCd').textContent = weekCd; // 애는 아이디를 안지정함
        })
        .catch(error => {
          console.error('Error fetching attendance details:', error);
        });
    });
  });
});
	
// 모달창에서 '등록'버튼 눌렀을때
var editorInstance;

  // CKEditor 초기화
  $('#staticBackdrop').on('shown.bs.modal', function () {
    if (!editorInstance) {
      editorInstance = CKEDITOR.replace('editor');
    }
  });

// 버튼 클릭 시 데이터 수집 및 알림창 출력
document.getElementById('approveButton').addEventListener('click', function() {
  if (editorInstance) {
    // CKEditor에서 입력된 HTML 데이터를 가져옵니다.
    var content = editorInstance.getData();
    var absenceResn = content.replace(/<[^>]*>/g, '');  // HTML 태그 제거

    // 데이터를 수집
    const lectOrder = document.querySelector('#lectOrder').textContent;
    const absenceStatus = document.querySelector('#absenceStatus').textContent;
    const studentName = document.querySelector('#studentName').textContent;
    const studentId = document.querySelector('#studentId').textContent;
    const weekCd = document.querySelector('#weekCd').textContent;

    // `lectNo` 값 가져오기
    const lectNo = document.querySelector('#lectNo').value;  // `lectNo` 요소에서 값 가져오기

    // 알림창에 수집한 데이터 표시
	swal({
			title: "추가완료",
			text: "주차가 성공적으로 추가되었습니다",
			icon: "success",
			button: "확인"
		})
	.then((value) => { // '확인' 버튼 클릭 후 0.2초 대기 후 페이지 새로 고침
      setTimeout(() => {
        location.reload(); // 페이지 새로고침
      }, 200); // 200ms = 0.2초
    });

    // 콘솔에도 출력 (디버깅용)
    console.log({
      test: "여기가 첫번째로 찍는거",
	  lectNo: lectNo,
      lectOrder: lectOrder,
      absenceStatus: absenceStatus,
      studentName: studentName,
      studentId: studentId,
      absenceResn: absenceResn,
	  weekCd: weekCd
    });
		
	  // 수집한 데이터를 VO 객체로 만들어서 전송
    const absenceData = {
      absenceStatus: absenceStatus, // 출결 상태
      studentVOnm: studentName, // 학생명
      lectNo: lectNo,           // 강의번호
      lectOrder: lectOrder,     // 강의 차수
      stuId: studentId,     	// 학번
      absenceResn: absenceResn, // 공결 사유
      weekCd: weekCd,           // 주차 코드
	  //absenceCd: '11',			// 공결서류번호 '임시'
	  atchFileId: '43'			// 파일그룹번호 '임시'
	  //cocoCd: 'CO01'			// 서류 처리상태 '임시'
    };
	
	console.log('게시물이 등록되었으니 여기서 2번째로 찍어보는곳 : ' ,absenceData)
	
	// 데이터를 서버로 전송합니다.
    fetch(`${$('#cp').val()}/lecture/${$('#lectNo').val()}/materials/new/absence` , {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(absenceData)
    })
		.then(response => response.json())
		.then(data => {
		  console.log('Success:', data);
		})
		.catch(error => {
		  console.error('Error:', error);
		});
   
  }
});





	
// "파일정보보기" 버튼 클릭 시 동작
document.getElementById('showFileInfoBtn').addEventListener('click', function() {
  if (window.uploadedFiles && window.uploadedFiles.length > 0) {
    // 업로드된 파일 정보가 있으면 표시
    let fileInfo = '업로드된 파일 정보:\n';
    window.uploadedFiles.forEach((file, index) => {
      fileInfo += `파일 ${index + 1}: ${file.name}, URL: ${file.url}, 크기: ${file.size} bytes\n`;
    });
    
    // 알림창으로 파일 정보 출력
    swal({
      title: "업로드된 파일 정보",
      text: fileInfo,
      icon: "info",
      button: "확인"
    });
  } else {
    // 업로드된 파일이 없으면 알림
    swal({
      title: "파일 정보 없음",
      text: "업로드된 파일이 없습니다.",
      icon: "warning",
      button: "확인"
    });
  }
});


var contextPath = document.querySelector('#form-table').dataset['path'];

var editorInstance;
	
	import {
		ClassicEditor,
		SimpleUploadAdapter,
		Bold,
		Italic,
		Underline,
		BlockQuote,
		Essentials,
		Heading,
		Image,
		ImageUpload,
		Link,
		List,
		MediaEmbed,
		Table,
		TableToolbar,
		FontSize,
		FontFamily,
		FontColor,
		Undo
	
	} from '../../../resources/js/ckeditor5/ckeditor5.js';
	
	const csrfMetaTag = document.querySelector('meta[name="csrf-token"]');
	const csrfToken = csrfMetaTag ? csrfMetaTag.getAttribute('content') : null;
	
	ClassicEditor.create( document.querySelector('#editor'),{
		licenseKey: 'GPL'
		,  plugins: [
            Essentials, Bold, Italic, Underline, Link, Image, ImageUpload,
            List, BlockQuote, Heading, MediaEmbed, Table, TableToolbar, 
            FontSize, FontFamily, FontColor, Undo, SimpleUploadAdapter
        ],
        toolbar: [
            'undo', 'redo', '|', 'bold', 'italic', 'underline', '|', 'link', 'imageUpload', '|',
            'bulletedList', 'numberedList', '|', 'blockquote', 'insertTable', '|',
            'fontSize', 'fontFamily', 'fontColor', '|', 'mediaEmbed'
        ],language: 'ko' // 한국어 설정
		, simpleUpload: { 
					uploadUrl: `${contextPath}/imageUpload`
					, headers:  csrfToken ? { 'X-CSRF-TOKEN': csrfToken } : {}
					
			}
	})
	
	 .then(editor => {
        editorInstance = editor;
    })
    .catch(error => {
        console.error(error);

	})//create에디터 끝
	

