package kr.or.ddit.yguniv.security.conf;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration//설정파일로 지정
@EnableWebSecurity //필터체인 등록 끝
public class SecurityContextJavaConfig {
	
	 @Autowired
	 private AuthenticationManagerBuilder authenticationManagerBuilder;
	 @PostConstruct
	 public void init() {
	 authenticationManagerBuilder.eraseCredentials(false);
	 }
	
	 @Bean
	 public PasswordEncoder passwordEncoder() {
	 return PasswordEncoderFactories.createDelegatingPasswordEncoder();
	 }
//	 @Bean
//	 public UserDetailsService userDetailService(PasswordEncoder encoder) {
//	 InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();
//	 manager.createUser(User.withUsername("a001").password(encoder.encode("java")).roles("USER").build());
//	 manager.createUser(User.withUsername("c001").password(encoder.encode("java")).roles("ADMIN").build());
//	 return manager;
//	 }
	 
		@Bean
		public WebSecurityCustomizer webSecurityCustomizer() {
			return (web) -> web.ignoring().antMatchers("/resources/**");
		}
	 @Bean
	 public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		 http.anonymous().authorities("ROLE_ANONYMOUS")
						 .and()
						 .authorizeHttpRequests(authorize->
							 authorize
								 .antMatchers("/public/**").permitAll()
								 .antMatchers("/member/*List*").hasRole("ADMIN")
								 .antMatchers("/member/*Insert*").hasRole("ANONYMOUS")
								 .antMatchers("/prod/*Insert*").hasRole("ADMIN")
								 .antMatchers("/prod/*Update*").hasRole("ADMIN") //상품 수정작업은 어드민만
								 .antMatchers("/buyer/**").hasRole("ADMIN") //바이어와 관련된 모든 작업은 어드민ㅁ나
								 .antMatchers("/mypage").authenticated()
								 .anyRequest().permitAll()
						 ).formLogin()
						 .and().csrf().disable();
		 
		 return http.build();
	 }
}























