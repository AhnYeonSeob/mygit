package kr.or.ddit.yguniv.projectteam.service;

import java.util.List;

import org.springframework.stereotype.Service;

import kr.or.ddit.yguniv.commons.exception.PKNotFoundException;
import kr.or.ddit.yguniv.noticeboard.exception.BoardException;
import kr.or.ddit.yguniv.projectTask.service.ProjectTaskService;
import kr.or.ddit.yguniv.projectteam.dao.ProjectTeamMapper;
import kr.or.ddit.yguniv.vo.ProjectTaskVO;
import kr.or.ddit.yguniv.vo.ProjectTeamFormVO;
import kr.or.ddit.yguniv.vo.ProjectTeamVO;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class ProjectTeamServiceImpl implements ProjectTeamService {
	private final ProjectTeamMapper mapper;
	private final ProjectTaskService projectTaskService;
	
	@Override
	public int createProjectTeam(ProjectTeamFormVO teamForm) {
		//팀갯수를 받아서 해당 갯수만큼 팀 생성하기
		int teamCount = Integer.parseInt(teamForm.getTeamCount());
		int createdTeams = 0;
		
		try {
			//해당 프로젝트과제 가져오기
			ProjectTaskVO task = projectTaskService.readProjectTask(teamForm.getTaskNo());
			// 팀생성 필수값 프로젝트 주제,프로젝트내용,프로젝트시작일,프로젝트종료일
			for(int i=0; i<teamCount; i++) {
				ProjectTeamVO projectTeam = new ProjectTeamVO();
				try {
						projectTeam.setProjectTask(task);
						//주제
						projectTeam.setTeamPurpo(task.getTaskTitle());
						//내용
						projectTeam.setTeamNotes(task.getTaskNotes());
						//프로젝트과제번호
						projectTeam.setTaskNo(task.getTaskNo());
						
						createdTeams += mapper.insertProjectTeam(projectTeam);
						
				}catch(RuntimeException e) {
					throw new BoardException("팀생성중 데이터오류",e);
				}
			}
		}catch(RuntimeException e){
			throw new PKNotFoundException("해당과제는 존재하지않습니다.",e);
		}
		
		if(createdTeams!=teamCount) {
			throw new BoardException("오류!!! 팀갯수만큼 생성되지않음!");
		}
		
		return createdTeams;
	}

	@Override
	public ProjectTeamVO readProjectTeam(String teamCd) {
		try {
			ProjectTeamVO projectTeam = mapper.selectProjectTeam(teamCd);
			return projectTeam;
			
		}catch(RuntimeException e) {
			throw new BoardException("해당 팀번호의 팀은 존재하지않습니다.",e);
		}
		
	}

	@Override
	public List<ProjectTeamVO> readProjectTeamList(String taskNo) {
		if(taskNo==null||taskNo.isEmpty()) {
			throw new BoardException("과제번호가 입력되지않았습니다.");
		}
		
		return mapper.selectProjectTeamlistWithTask(taskNo);
	}

	@Override
	public int modifyProjectTeam(ProjectTeamVO projectTeam) {
		
		return mapper.updateProjectTeam(projectTeam);
	}

	@Override
	public int removeProjectTeam(String teamCd) {
		try {
			return mapper.deleteProjectTeam(teamCd);
			
		}catch(RuntimeException e) {
			throw new BoardException("해당 팀번호의 팀은 존재하지않습니다.",e);
		}
	}

	@Override
	public int updateStatus(String teamCd) {
		try {
			ProjectTeamVO projectTeam = mapper.selectProjectTeam(teamCd);
			String status= projectTeam.getTeamStatus();
			if(status.equalsIgnoreCase("Y")) {
				status = "N";
			}else {
				status = "Y";
			}
			projectTeam.setTeamStatus(status);
			
			return mapper.updateStatus(projectTeam);
			
		}catch(RuntimeException e) {
			throw new BoardException("해당 팀번호의 팀은 존재하지않습니다.",e);
		}
	}

	@Override
	public int updateEvyn(String teamCd) {
		try {
			return mapper.updateEvyn(teamCd);
			
		}catch(RuntimeException e) {
			throw new BoardException("해당 팀번호의 팀은 존재하지않습니다.",e);
		}
	}

	@Override
	public int updateProge(ProjectTeamVO projectTeam) {
		
		return mapper.updateProge(projectTeam);
	}

}
