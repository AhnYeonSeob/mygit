<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.yguniv.dissent.dao.DissentMapper">

<resultMap type="ScoreFormalObjectionVO" id="scoreMap" autoMapping="true">
	<association property="attenVO" javaType="AttendeeVO" autoMapping="true">
		<association property="studentVO" javaType="StudentVO" autoMapping="true">
			<result property="gradeCd" column="GRADE_CD"/>
		</association>
	</association>
	<association property="lectVO" javaType="LectureVO" autoMapping="true"></association>
</resultMap>

<resultMap type="ScoreFormalObjectionVO" id="profeMap">
	<association property="lectVO" javaType="LectureVO" autoMapping="true"></association>
	<association property="personVO" javaType="PersonVO" autoMapping="true">
		<result column="NM" property="nm"/>
	</association>
</resultMap>

<resultMap type="ScoreFormalObjectionVO" id="attenScoreMap">
    <result property="lectNo" column="LECT_NO"/>
    <result property="stuId" column="STU_ID"/>
    <result property="objcCn" column="OBJC_CN"/>
    <result property="answerCn" column="ANSWER_CN"/>

    <association property="lectVO" javaType="LectureVO" autoMapping="true"/>
    <association property="attenVO" javaType="AttendeeVO" autoMapping="true"/>
    <association property="personVO" javaType="PersonVO" autoMapping="true"/>
    <association property="semstrVO" javaType="SemesterVO" autoMapping="true"/>
    <association property="studentVO" javaType="StudentVO" autoMapping="true"/>
</resultMap>

<sql id="selectFrag">
		<trim prefix="WHERE" prefixOverrides="AND"><!--  조건을 만족하면 AND를 지우고 WHERE을 붙힘-->
				<if test="paging neq null and paging.detailCondition neq null">
					<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(paging.detailCondition.prodLgu)">
						AND PROD_LGU=#{paging.detailCondition.prodLgu}
					</if>
					<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(paging.detailCondition.prodBuyer)">
						AND PROD_BUYER=#{paging.detailCondition.prodBuyer}
					</if>
					<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(paging.detailCondition.prodName)">
						AND INSTR(PROD_NAME,#{paging.detailCondition.prodName})>0
					</if>
				</if>
			</trim>
	</sql>


<select id="selectDissentList" resultMap="scoreMap">
	SELECT B.*
	FROM
	(
		SELECT ROWNUM RNUM ,A.*
		FROM
		(
    SELECT
	    A.ID,A.NM,C.GRADE_CD,B.ATTEN_ATND_SCORE,B.ASSIG_SCORE,B.TEST_SCORE,B.ATTEN_SCORE,D.LECT_NM
        ,E.OBJC_CN,E.ANSWER_CN,D.LECT_NO,E.STU_ID
    FROM
	    PERSON A   INNER JOIN ATTENDEE B ON A.ID = B.STU_ID
	               INNER JOIN STUDENT C ON A.ID = C.STU_ID
	               INNER JOIN LECTURE D ON B.LECT_NO = D.LECT_NO
                   INNER JOIN SCORE_FORMAL_OBJECTION E ON A.ID = E.STU_ID
    WHERE E.ANSWER_CN is NULL 
    ) A
	)B
	<where> <!-- if절의 조건을 만족하면 where 절을 붙히며 쿼리를 만듬 -->
		<if test="paging neq null" > <!-- null이 아니면 -->
			<![CDATA[
				RNUM >= #{paging.startRow} AND RNUM <=#{paging.endRow}
			]]>
		</if>
	</where>
	
</select>


<select id="selectProfeDissentList" resultMap="profeMap">

SELECT B.*
	FROM
	(
		SELECT ROWNUM RNUM ,A.*
		FROM
		(
     SELECT
      PS.NM,L.LECT_NO,LECT_NM,PS.ID,S.OBJC_CN
    FROM PROFESSOR P INNER JOIN LECTURE L ON P.PROFE_ID = L.PROFE_ID
                     INNER JOIN SCORE_FORMAL_OBJECTION S ON L.LECT_NO = S.LECT_NO 
                     INNER JOIN PERSON PS ON S.STU_ID = PS.ID
   WHERE P.PROFE_ID=#{profeId} and S.ANSWER_CN IS NULL
    ) A
	)B
	<where> <!-- if절의 조건을 만족하면 where 절을 붙히며 쿼리를 만듬 -->
		<if test="paging neq null" > <!-- null이 아니면 -->
			<![CDATA[
				RNUM >= #{paging.startRow} AND RNUM <=#{paging.endRow}
			]]>
		</if>
	</where>
  
   
</select>


<select id="selectDissentOne" resultMap="scoreMap">
 
    SELECT
        S.LECT_NO,A.STU_ID,S.OBJC_CN,A.ATTEN_ATND_SCORE,A.ASSIG_SCORE,A.TEST_SCORE,P.NM,L.LECT_NM
    FROM SCORE_FORMAL_OBJECTION S INNER JOIN ATTENDEE A ON S.STU_ID = A.STU_ID AND S.LECT_NO = A.LECT_NO
                                  INNER JOIN LECTURE L ON S.LECT_NO = L.LECT_NO
                                  INNER JOIN PERSON P ON S.STU_ID=P.ID
    WHERE S.STU_ID=#{stuId} AND S.LECT_NO=#{lectNo}
                                
</select>

<insert id="insertDissent">
	
	INSERT INTO SCORE_FORMAL_OBJECTION (
	    LECT_NO, STU_ID, OBJC_CN
	) VALUES (
	    #{lectNo}, #{stuId}, #{objcCn}
	)
	
</insert>



<update id="updateAttendee">

UPDATE ATTENDEE
SET
    ATTEN_ATND_SCORE = #{attenAtndScore,jdbcType=DOUBLE}
    ,ASSIG_SCORE = #{assigScore}
    ,TEST_SCORE = #{testScore}   
WHERE
    LECT_NO = #{lectNo}  AND STU_ID = #{stuId}
</update>

<update id="updateDissent">
 UPDATE SCORE_FORMAL_OBJECTION
SET
    ANSWER_CN = #{answerCn}  
WHERE
    LECT_NO = #{lectNo}  AND STU_ID = #{stuId}
 
</update>

<!-- <delete id="deleteDissent"> -->

<!-- DELETE  -->
<!--  FROM SCORE_FORMAL_OBJECTION -->

<!-- WHERE -->
<!--         LECT_NO = :V0 -->

<!-- </delete> -->

<select id="selectSemesterList" resultType="SemesterVO">
	SELECT SEMSTR_NO FROM SEMESTER
	
</select>

<resultMap type="LectureVO" id="lectProfeList">
	<association property="professorVO" javaType="ProfessorVO">
<!-- 		<association property="person" javaType="PersonVO"> -->
<!-- 		</association> -->
	</association>
</resultMap>

<select id="selectLectureList" resultType="LectureVO">
SELECT
    L.LECT_NO,L.LECT_NM,PE.NM
FROM
    LECTURE L INNER JOIN PROFESSOR P ON L.PROFE_ID = P.PROFE_ID
              INNER JOIN PERSON PE ON P.PROFE_ID = PE.ID
ORDER BY L.LECT_NO,L.LECT_NM,PE.NM
</select>	

<select id="selectAttenLectList" resultMap="attenScoreMap">
	SELECT 
    S.STU_ID, P.NM, SEM.SEMSTR_NO,
    A.ATTEN_ATND_SCORE,A.ASSIG_SCORE,A.TEST_SCORE,
    L.LECT_NM,L.LECT_NO,L.LECT_SCORE
FROM 
    STUDENT S INNER JOIN PERSON P ON S.STU_ID = P.ID
              INNER JOIN ATTENDEE A ON S.STU_ID = A.STU_ID
              INNER JOIN LECTURE L ON A.LECT_NO = L.LECT_NO
              INNER JOIN SEMESTER SEM ON L.SEMSTR_NO = SEM.SEMSTR_NO
WHERE 
    S.STU_ID = '2024100002' 
    <!-- 수강생의 강의 리스트 -->
    
    AND SEM.SEMSTR_NO = '202401' 
    AND L.LECT_NO='L003'
</select>

<select id="selectAttenLectOne" resultMap="attenScoreMap">
	SELECT 
    S.STU_ID, P.NM, SEM.SEMSTR_NO,
    A.ATTEN_ATND_SCORE,A.ASSIG_SCORE,A.TEST_SCORE,
    L.LECT_NM,L.LECT_NO,L.LECT_SCORE
FROM 
    STUDENT S INNER JOIN PERSON P ON S.STU_ID = P.ID
              INNER JOIN ATTENDEE A ON S.STU_ID = A.STU_ID
              INNER JOIN LECTURE L ON A.LECT_NO = L.LECT_NO
              INNER JOIN SEMESTER SEM ON L.SEMSTR_NO = SEM.SEMSTR_NO
WHERE 
    S.STU_ID = '2024100002' 
    <!-- 수강생의 강의 리스트 -->
    
    AND SEM.SEMSTR_NO = '202401' 
    AND L.LECT_NO='L003'
</select>

<resultMap type="LectureVO" id="ProfeMap">
	<association property="professorVO" javaType="ProfessorVO">
<!-- 		<association property="person" javaType="PersonVO"></association> -->
	</association>
	
</resultMap>
<select id="selectProfeName" resultMap="profeMap">

SELECT
    L.LECT_NO,L.LECT_NM,PE.NM
FROM
    LECTURE L INNER JOIN PROFESSOR P ON L.PROFE_ID = P.PROFE_ID
              INNER JOIN PERSON PE ON P.PROFE_ID = PE.ID
WHERE L.LECT_NO=#{lectNo}
ORDER BY L.LECT_NO,L.LECT_NM,PE.NM
</select>	

</mapper>



































