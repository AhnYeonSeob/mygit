
document.addEventListener("DOMContentLoaded", ()=>{
	let attendanceChanges = {};
	let updates = [];
	
	let filterLectNo = null;  // 필터링된 강의 번호
	let filterWeekCd = null;  // 필터링된 weekCd
	let filterLectOrder = null;  // 필터링된 lectOrder
	
	const lectNo = document.querySelector('#lectNo').value;
	
	
	// 모든 학생 ID를 배열로 수집
	var studentIds = [];
	
	document.querySelectorAll('.student-id').forEach(function(cell) {
	    var stuId = cell.getAttribute('data-stu-id');
	    if (stuId) {
	        studentIds.push(stuId);
	    }
	});
	
	console.log(studentIds);  // 배열에 학생 IDs 출력
	
	
	document.querySelector('.fetch-attendance-btn').addEventListener('click', function() {
	    // 여기서 서버 요청을 통해 데이터를 받아와서 테이블을 채울 수 있습니다.
	    // 데이터를 받아오는 로직이 끝난 후 해당 tbody를 표시합니다.
	
	    // 예시: 데이터가 성공적으로 로드된 경우
	    document.getElementById('attendanceTableBody').style.display = 'table-row-group';  // <tbody>를 표시
	});
	
	
	// 일자 강의차수 교시 보여주는 테이블
	// 모든 "조회" 버튼에 클릭 이벤트 리스너를 추가합니다.
	document.querySelectorAll('.fetch-attendance-btn').forEach(button => {
	    button.addEventListener('click', function(event) {
	        event.preventDefault(); // 기본 버튼 동작을 막습니다.
	
	        // 클릭된 버튼에서 data-* 속성 값 가져오기
	        const sectDt = this.getAttribute('data-sect-dt');  // 일자
	        const lectOrder = this.getAttribute('data-lect-order');  // 강의차수
	        const cocoStts = this.getAttribute('data-coco-stts');  // 교시
			filterLectNo = this.getAttribute('data-lect-no');
        	filterLectOrder = this.getAttribute('data-lect-order');
	
	        // 값을 업데이트하는 함수 호출
	        updateTargetRow(sectDt, lectOrder, cocoStts);
	    });
	});
	
	// targetRow를 업데이트하는 함수
	function updateTargetRow(sectDt, lectOrder, cocoStts) {
	    // targetRow의 각 셀을 찾아서 값 업데이트
		
		let year = sectDt.substring(0, 4);
		let month = sectDt.substring(4, 6);
		let day = sectDt.substring(6, 8);
		
		// 'YYYY-MM-DD' 형식으로 결합
		let formattedDate = `${year}-${month}-${day}`;
		
		// 변환된 날짜를 요소에 출력
		document.getElementById('sectDtCell').textContent = formattedDate;
	    document.getElementById('lectOrderCell').textContent = lectOrder;
	    document.getElementById('cocoSttsCell').textContent = cocoStts;
	}
	
	document.querySelectorAll('.fetch-attendance-btn').forEach(button => {
	    button.addEventListener('click', function(event) {
	        event.preventDefault();  // 기본 동작 막기
			const cp = document.querySelector('#contextPath').value;
			
	        // 클릭된 버튼에서 data-* 속성 값 가져오기
	        const filterLectNo = this.getAttribute('data-lect-no');  // 강의번호
	        const filterWeekCd = this.getAttribute('data-week-cd');  // 주차 코드
	        const filterLectOrder = this.getAttribute('data-lect-order');  // 강의차수
			
			attendanceStatusData = [];
	
	        console.log('조회버튼 클릭 이벤트');
	        console.log('lectNo:', filterLectNo);
	        console.log('weekCd:', filterWeekCd);
	        console.log('lectOrder:', filterLectOrder);
	        console.log(`${cp}/lecture/${filterLectNo}/attendan/${filterLectOrder}`);
			
	
			axios.get(`${cp}/lecture/${filterLectNo}/attendan/${filterLectOrder}`)
			.then(resp=>{
				resp.data.attendanceVOList.forEach(vo=>{
					let tr = document.querySelector(`.attendanceRow[data-stu-id='${vo.stuId}']`);
					$(tr).find(`button[data-status!='${vo.atndCd}']`).removeClass('selected');
					$(tr).find(`button[data-status='${vo.atndCd}']`).addClass('selected');
				})
			})
	    });
	});
	
	
	
	
	
	
	// 출석 상태를 저장할 배열
	let attendanceStatusData = [];
	
	// 출석 상태 버튼 클릭 시 상태를 임시 저장
	document.querySelectorAll('.attendance-btn').forEach(button => {
	    button.addEventListener('click', function(event) {
	        event.preventDefault();

			// 조회 버튼을 통해 설정된 filterLectNo와 filterLectOrder 값이 있어야 함
	        

	
	        // 클릭한 버튼의 출석 상태 (ATND_CD)
	        const selectedStatus = this.getAttribute('data-status');
	        
	        // 클릭한 버튼의 부모 행 (학생 출결 상태가 표시된 tr)
	        const tr = this.closest('tr');  // 해당 버튼이 포함된 tr 요소를 찾아냄
	        const studentId = tr.getAttribute('data-stu-id');  // 학생 ID (tr에 data-stu-id 속성 있다고 가정)
	
	        // 해당 학생의 출석 상태가 이미 선택되었는지 확인
	        let statusObj = attendanceStatusData.find(item => item.stuId === studentId);

			
	
	        if (!statusObj) {
	            // 해당 학생의 출석 상태가 아직 저장되지 않았다면 새로 추가
	            statusObj = {
	                stuId: studentId
	                , atndCd: selectedStatus
					, lectNo: `${filterLectNo}`
					, lectOrder: `${filterLectOrder}`
	            };
	            attendanceStatusData.push(statusObj);
	        } else {
	            // 이미 저장된 학생이라면 상태 변경
	            statusObj.atndCd = selectedStatus;
	        }
	
	        // 해당 학생의 모든 버튼에서 'selected' 클래스 제거
	        const buttons = tr.querySelectorAll('.attendance-btn');
	        buttons.forEach(btn => btn.classList.remove('selected'));
	
	        // 클릭한 버튼에만 'selected' 클래스 추가
	        this.classList.add('selected');
	
	        // 콘솔 로그로 현재 선택된 상태 출력 (디버깅용)
	        console.log(attendanceStatusData);
	    });
	});
	
	// 상태 저장 버튼 클릭 시, 서버로 출석 상태 업데이트
	document.getElementById('saveAttendanceButton').addEventListener('click', function() {
	    console.log("내가 저장할 임시데이터 : ", attendanceStatusData);
		
		if (!filterLectNo || !filterLectOrder) {
			swal({
                title: '강의를 선택해주세요.',
                text: '선택된 강의가 없습니다.',
                icon: 'warning',
                confirmButtonText: '확인'
            });
            return;
        }
	    
	    // 출석 상태 중복 체크 후 업데이트
	    updateAttendanceStatus(attendanceStatusData);
	});
	
	// 출석 상태 업데이트 요청 (서버로 전송)
	function updateAttendanceStatus(attendanceData) {
		
	    const cp = document.querySelector('#contextPath').value;
	    const url = `${cp}/lecture/L005/attendan/edit`; // 실제 URL 수정
	
	    // attendanceData 배열을 그대로 JSON으로 전송
	    fetch(url, {
	        method: 'PUT',
	        headers: {
	            'Content-Type': 'application/json'
	        },
	        body: JSON.stringify(attendanceData) // JSON 배열로 변환하여 보냄
	    })
	    .then(response => {
	        console.log('Status:', response.status); // HTTP 상태 코드 확인
	        console.log('Headers:', response.headers.get('Content-Type')); // 응답 Content-Type 확인
	        return response.json();
	    })
	    .then(data => {
	        console.log('출석 상태 업데이트 성공:', data);
	        alert('출석 상태가 성공적으로 저장되었습니다.');
	    })
	    .catch(error => {
	        console.error('출석 상태 업데이트 오류:', error);
	        alert('출석 상태 저장에 실패했습니다. 오류: ' + error.message);
	    });
	}

	
	// 출석 상태 기록용, 버튼을 누를 때마다 저장되고 중복은 처리 안됨
	function updateAttendanceStatusInArray(stuId, lectOrder, lectNo, atndCd) {
	    
		// 중복 체크 후 출석 상태 추가
	    const existingEntryIndex = attendanceStatusData.findIndex(update => 
	        update.stuId === stuId &&
	        update.lectOrder === lectOrder &&
	        update.lectNo === lectNo &&
	        update.atndCd === atndCd 
	    );
	
	    if (existingEntryIndex === -1) {  // 중복이 없는 경우
	        attendanceStatusData.push({
	            stuId: stuId,
	            lectOrder: lectOrder,
	            lectNo: lectNo,
	            atndCd: atndCd
	        });
	    } else {  // 중복이 있는 경우, 출석 상태만 업데이트
	        attendanceStatusData[existingEntryIndex].atndCd = atndCd;
	    }
	
	    console.log('현재 attendanceStatusData 배열:', attendanceStatusData);
	}
	
	// 출석 버튼 클릭 시 업데이트 (for문으로 배열 순회하여 업데이트)
	document.querySelectorAll('.attendance-btn').forEach(button => {
	    button.addEventListener('click', function() {
			
	        const tr = this.closest('tr');
	        const stuId = tr.getAttribute('data-stu-id');
	        const atndCd = this.getAttribute('data-status');
	        const lectNo = filterLectNo;
	        const lectOrder = filterLectOrder;
	        
			console.log("출석 후 업뎃 lectOrder : ", lectOrder);
			console.log("출석 후 업뎃 lectNo  : ",  lectNo );


	        // 중복 체크 후 출석 상태 기록
	        updateAttendanceStatusInArray(stuId, lectOrder, lectNo, atndCd);
	    });
	});

});



















