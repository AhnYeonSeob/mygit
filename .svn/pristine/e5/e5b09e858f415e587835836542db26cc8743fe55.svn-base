package kr.or.ddit.yguniv.assignmentSubmission.service;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import kr.or.ddit.yguniv.assignment.dao.AssignmentMapper;
import kr.or.ddit.yguniv.assignment.service.AssignmentService;
import kr.or.ddit.yguniv.assignmentSubmission.dao.AssignmentSubmissionMapper;
import kr.or.ddit.yguniv.atch.service.AtchFileService;
import kr.or.ddit.yguniv.commons.exception.PKNotFoundException;
import kr.or.ddit.yguniv.noticeboard.exception.BoardException;
import kr.or.ddit.yguniv.vo.AssignmentSubmissionVO;
import kr.or.ddit.yguniv.vo.AssignmentVO;
import kr.or.ddit.yguniv.vo.AtchFileDetailVO;
import kr.or.ddit.yguniv.vo.AtchFileVO;
import kr.or.ddit.yguniv.vo.LectureVO;
import kr.or.ddit.yguniv.vo.SerchMappingVO;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class AssignmentSubmissionServiceImpl implements AssignmentSubmissionService {
	private final AssignmentSubmissionMapper mapper;
	private final AtchFileService atchFileService;
	private final AssignmentService assignmentService;
	
	@Value("#{dirInfo.fsaveDir}")
	private Resource saveFolderRes;
	private File saveFolder;
	
	@PostConstruct
	public void init() throws IOException {
		this.saveFolder = saveFolderRes.getFile();
	}
	
	@Override
	public void createAssignmentSubmission(AssignmentSubmissionVO assignmentSubmission) {
		LectureVO lecture = assignmentService.checkLecture(assignmentSubmission.getLectNo());
		AssignmentVO assignment = assignmentService.readAssignment(assignmentSubmission.getAssigNo());
		if(lecture!=null) {
			Integer atchFileId = Optional.ofNullable(assignmentSubmission.getAtchFile())
					.filter(af->! CollectionUtils.isEmpty(af.getFileDetails()))
					.map(af -> {
						atchFileService.createAtchFile(af, saveFolder);
						return af.getAtchFileId();
					}).orElse(null);
			
			assignmentSubmission.setLectNm(lecture.getLectNm());
			assignmentSubmission.setAtchFileId(atchFileId);
			assignmentSubmission.setAssignment(assignment);
			
			mapper.insertAssignmentSubmission(assignmentSubmission);
		}
		else {
			throw new PKNotFoundException("해당강의번호는 존재하지않습니다.");
		}
	}

	@Override
	public AssignmentSubmissionVO readAssignmentSubmission(SerchMappingVO search) {
		AssignmentSubmissionVO assignmentSubmission = mapper.selectAssignmentSubmission(search);
		if(assignmentSubmission==null) {
			throw new BoardException("조회불가! 해당조건의 해당하는 제출과제없음");
		}
		assignmentSubmission.setLectNm(assignmentService.checkLecture(search.getLectNo()).getLectNm());
		
		return assignmentSubmission;
	}
	//페이징처리와 검색처리를 하지않은 이유는 data-table 사용예정  
	@Override
	public List<AssignmentSubmissionVO> readAssignmentSubmissionlist(SerchMappingVO search) {
		
		return mapper.selectAssignmentSubmissionList(search);
	}

	@Override//과제제출
	public void modifyAssignmentSubmission(final AssignmentSubmissionVO assignmentSubmission) {
		
		SerchMappingVO search = new SerchMappingVO();
		assignmentSubmission.setAssubYn("Y");
		search.setAssigNo(assignmentSubmission.getAssigNo());
		search.setLectNo(assignmentSubmission.getLectNo());
		search.setStuId(assignmentSubmission.getStuId());
		
		final AssignmentSubmissionVO saved = readAssignmentSubmission(search);
		
		Integer newAtchFileId = Optional.ofNullable(assignmentSubmission.getAtchFile())
				.filter(af -> af.getFileDetails() != null)
				.map(af ->mergeSavedDetailsAndNewDetails(saved.getAtchFile() , af))
				.orElse(null);
		
		assignmentSubmission.setAtchFileId(newAtchFileId);
		
		mapper.updateAssignmentSubmission(assignmentSubmission);
	}

	@Override
	public void removeAssignmentSubmission(SerchMappingVO search) {
		AssignmentSubmissionVO assignmentSubmission = mapper.selectAssignmentSubmission(search);
		
		Optional.ofNullable(assignmentSubmission.getAtchFileId())
		.ifPresent(fid -> atchFileService.disableAtchFile(fid));
		
		mapper.deleteAssignmentSubmission(search);
	}

	@Override
	public int updateSubmissionStatus(SerchMappingVO search) {
		
		AssignmentSubmissionVO vo = mapper.selectAssignmentSubmission(search);
		
		String Yn = vo.getAssubYn();
		
		if(Yn.equals("Y")) {
			search.setAssubYn("N");
			atchFileService.disableAtchFile(vo.getAtchFileId());
		}
		else {
			search.setAssubYn("Y");
		}
		return mapper.changeStatus(search);
	}

	@Override
	public AtchFileDetailVO download(int atchFileId, int fileSn) {
		return Optional.ofNullable(atchFileService.readAtchFileDetail(atchFileId, fileSn, saveFolder))
				.filter(fd -> fd.getSavedFile().exists())
				.orElseThrow(() -> new BoardException(String.format("[%d, %d]해당 파일이 없음.", atchFileId, fileSn)));
	}

	@Override
	public void removeFile(int atchFileId, int fileSn) {
		atchFileService.removeAtchFileDetail(atchFileId, fileSn, saveFolder);
	}

	/**
	 * 기존의 첨부파일 그룹이 있는 경우, 신규 파일과 기존 파일 그룹을 병합해 저장함.
	 * 
	 * @param atchFileId
	 */
	private Integer mergeSavedDetailsAndNewDetails(AtchFileVO savedAtchFile, AtchFileVO newAtchFile) {
		// 새로 병합할 파일 정보 설정
		AtchFileVO mergeAtchFile = new AtchFileVO();
		
		// 기존 파일 그룹과 신규 파일 그룹 병합
		List<AtchFileDetailVO> fileDetails = Stream.concat(
			Optional.ofNullable(savedAtchFile)
					.filter(saf->!CollectionUtils.isEmpty(saf.getFileDetails()))
					.map(saf->saf.getFileDetails().stream())
					.orElse(Stream.empty())
			, Optional.ofNullable(newAtchFile)
					.filter(naf->!CollectionUtils.isEmpty(naf.getFileDetails()))
					.map(naf->naf.getFileDetails().stream())
					.orElse(Stream.empty())
		).collect(Collectors.toList());		
		
		 // 병합된 파일 리스트 설정		
		mergeAtchFile.setFileDetails(fileDetails);
		
		 // 병합된 파일이 존재할 경우 저장
		if( ! mergeAtchFile.getFileDetails().isEmpty() ) {
			atchFileService.createAtchFile(mergeAtchFile, saveFolder);
		}
		
		if (savedAtchFile != null && savedAtchFile.getFileDetails() != null) {
			// 기존 첨부파일 그룹은 비활성화
			atchFileService.disableAtchFile(savedAtchFile.getAtchFileId());
		}

		return mergeAtchFile.getAtchFileId();
	}
	
	public int createGrade(AssignmentSubmissionVO assignmentSubmission) {
		
		return mapper.gradeScore(assignmentSubmission);
	}
	
}
