/*
// 출결 셀렉트 버튼 처리
function setAttendanceStatus(button, stuId, weekCd, lectOrder) {
    // 해당 학생의 모든 버튼을 가져옵니다 (stuId, weekCd, lectOrder로 구분)
    const buttons = document.querySelectorAll(`button[data-student-id="${stuId}"][data-week-cd="${weekCd}"][data-lect-order="${lectOrder}"]`);

    // 학생의 출석 상태를 서버에 전송하는 로직을 여기에 추가할 수 있습니다.
    const selectedStatus = button.getAttribute('data-status');  // 클릭한 버튼의 출석 상태

    // 출석 상태에 따른 클래스 변경 (ATND_CD에 따른 상태 매핑)
    let atndCd = selectedStatus;  // ATND_CD로 맵핑될 값을 가져오기 위한 변수
    let cocoSttsClass = '';  // 교시 상태별 클래스

    switch (atndCd) {
        case '출석':
            cocoSttsClass = 'attendance-btn-blue';  // 파란색 - 출석
            break;
        case '지각':
            cocoSttsClass = 'attendance-btn-green';  // 초록색 - 지각
            break;
        case '결석':
            cocoSttsClass = 'attendance-btn-yellow';  // 노란색 - 결석
            break;
        case '조퇴':
            cocoSttsClass = 'attendance-btn-red';  // 빨간색 - 조퇴
            break;
        default:
            cocoSttsClass = '';  // 기본 상태
    }

    // 해당 학생의 모든 버튼에서 'selected' 클래스 제거
    buttons.forEach(btn => btn.classList.remove('selected', 'attendance-btn-blue', 'attendance-btn-green', 'attendance-btn-yellow', 'attendance-btn-red'));

    // 선택된 버튼에 'selected' 클래스 및 색상 클래스 추가
    button.classList.add('selected', cocoSttsClass);

    // 선택된 상태 출력 (디버깅용)
    console.log(`학생 ID: ${stuId}, 주차: ${weekCd}, 차수: ${lectOrder}, 선택된 출석 상태: ${atndCd}`);
}
*/


let attendanceChanges = {};

function setAttendanceStatus(button, stuId, weekCd, lectOrder, lectNo) {
    
	console.log("lectNo:", lectNo);  // 콘솔에서 lectNo를 확인
    console.log("lectOrder:", lectOrder);  // lectOrder도 확인

	// 해당 학생의 모든 버튼을 가져옵니다 (stuId, weekCd, lectOrder로 구분)
    const buttons = document.querySelectorAll(`button[data-student-id="${stuId}"][data-week-cd="${weekCd}"][data-lect-order="${lectOrder}"]`);

    // 클릭한 버튼의 출석 상태
    const selectedStatus = button.getAttribute('data-status');  

    // 출석 상태에 따른 ATND_CD와 출석 인정 여부 (atndRcognYn)
    let atndCd = '';
    let cocoSttsClass = '';  // 버튼의 색상을 위한 클래스 변수

    // 상태에 따른 처리
    switch (selectedStatus) {
        case '출석':
            atndCd = 'ATN1';
            cocoSttsClass = 'attendance-btn-blue';
            break;
        case '지각':
            atndCd = 'ATN2';
            cocoSttsClass = 'attendance-btn-green';
            break;
        case '결석':
            atndCd = 'ATN3';
            cocoSttsClass = 'attendance-btn-yellow';
            break;
        case '조퇴':
            atndCd = 'ATN4';
            cocoSttsClass = 'attendance-btn-red';
            break;
        default:
            atndCd = '';
            cocoSttsClass = '';
    }

    // 해당 학생의 모든 버튼에서 'selected' 클래스 제거
    buttons.forEach(btn => btn.classList.remove('selected', 'attendance-btn-blue', 'attendance-btn-green', 'attendance-btn-yellow', 'attendance-btn-red'));

    // 선택된 버튼에 'selected' 클래스 및 색상 클래스 추가
    button.classList.add('selected', cocoSttsClass);


    // 상태 변경 후 서버로 업데이트 요청
    //updateAttendanceStatus(stuId, weekCd, lectOrder, lectNo, atndCd);
}











let filterWeekCd = null;  // 필터링된 weekCd
let filterLectOrder = null;  // 필터링된 lectOrder

// 출결데이터 아코디언 조회 방식
document.querySelectorAll('.fetch-attendance-btn').forEach(button => {
    button.addEventListener('click', function() {
        
		filterLectNo = this.dataset.lectNo;  // 강의번호
		filterWeekCd = this.dataset.weekCd;  // 선택된 주차 코드
        filterLectOrder = this.dataset.lectOrder;  // 선택된 회차
        
		console.log('lectNo:', filterLectNo);
        console.log('weekCd:', filterWeekCd);  // weekCd 출력
        console.log('lectOrder:', filterLectOrder);  // lectOrder 출력

        // 모든 출결 데이터 행을 가져옵니다.
        const rows = document.querySelectorAll('#attendanceTableBody .attendanceRow');

        // 모든 행을 숨기고, 필터링된 행만 표시합니다.
        rows.forEach(row => {
            const rowWeekCd = row.dataset.weekCd;
            const rowLectOrder = row.dataset.lectOrder;

            // weekCd와 lectOrder가 일치하는 행만 보이게 처리
            if (rowWeekCd === filterWeekCd && rowLectOrder === filterLectOrder) {
                row.style.display = '';  // 일치하는 행은 보이게
            } else {
                row.style.display = 'none';  // 일치하지 않으면 숨깁니다.
            }
        });
    });
});

// 전부 출석 버튼 클릭 시 처리
document.getElementById('markAllPresentButton').addEventListener('click', function() {
    if (filterWeekCd && filterLectOrder) {  // 필터링된 주차와 회차가 있는 경우
        // 필터링된 주차와 회차에 해당하는 출석 행들만 처리
        const rows = document.querySelectorAll('#attendanceTableBody .attendanceRow');

        rows.forEach(row => {
            const rowWeekCd = row.dataset.weekCd;
            const rowLectOrder = row.dataset.lectOrder;

            // 필터링된 조건에 맞는 행만 처리
            if (rowWeekCd === filterWeekCd && rowLectOrder === filterLectOrder) {
                // 해당 학생의 모든 버튼을 가져와 '출석' 상태로 변경
                const buttons = row.querySelectorAll('button');

                buttons.forEach(button => {
                    const currentStatus = button.getAttribute('data-status');
                    
                    // '출석' 버튼만 파란색으로 변경, 다른 버튼들은 그대로 둠
                    if (currentStatus === '출석') {
                        // '출석' 버튼을 선택 상태로 변경
                        button.classList.remove('attendance-btn-green', 'attendance-btn-yellow', 'attendance-btn-red');
                        button.classList.add('attendance-btn-blue');
                        button.setAttribute('data-status', '출석');  // 출석 상태로 설정
                        button.classList.add('selected');
                    } else {
                        // '출석' 상태가 아닌 버튼은 아무 변화 없음
                        button.classList.remove('selected');  // '출석'이 아닌 버튼의 selected 상태 제거
                    }
                });

                // 출석 상태 변경 사항을 임시 저장
                storeAttendanceChange(row, '출석');
				console.log('storeAttendanceChange 의 값:' ,storeAttendanceChange);
            }
        });
    } else {
        alert('조회된 데이터가 없습니다. 먼저 조회를 해주세요.');
    }
});



function storeAttendanceChange(row, status) {
    const studentId = row.querySelector('td').textContent;  // 첫 번째 칼럼에 학생 ID 있음
    const weekCd = row.dataset.weekCd;
    const lectOrder = row.dataset.lectOrder;

    // 학생 ID, 주차, 회차에 대한 출석 상태를 임시로 저장
    attendanceChanges[`${studentId}-${weekCd}-${lectOrder}`] = status;
}


// 저장 버튼 클릭 시 처리
document.getElementById('saveAttendanceButton').addEventListener('click', function() {
    // 저장된 출석 상태를 서버에 전송
    saveAttendanceStatus();
});

function saveAttendanceStatus() {
    // 서버에 전송할 데이터를 구성
    const updates = [];

    const lectNo = filterLectNo;  // 필터링된 강의 번호 또는 lectNo가 없으면 다른 방법으로 처리해야 할 수 있음
    if (!lectNo) {
        alert('강의 번호(lectNo)가 지정되지 않았습니다.');
        return;
    }

    // attendanceChanges 객체에서 상태를 읽어와서 updates 배열에 저장
    for (const key in attendanceChanges) {
        if (attendanceChanges.hasOwnProperty(key)) {
            const [studentId, weekCd, lectOrder] = key.split('-');
            updates.push({
                studentId: studentId,
                weekCd: weekCd,
                lectOrder: lectOrder,
                status: attendanceChanges[key]  // 임시 저장된 출석 상태
            });
        }
    }

    // 출석 상태를 서버로 전송 (예시: AJAX 요청)
    fetch(`${contextPath.value}/attendance/attendan/${lectNo}/edit`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(updates)  // 출석 상태 목록
    })
    .then(response => {
        // 서버 응답이 성공적이지 않은 경우
        if (!response.ok) {
            return response.text().then(text => {
                throw new Error(`서버 오류: ${response.status} - ${text}`);
            });
        }
        return response.json();  // 응답이 JSON 형식일 경우 파싱
    })
    .then(data => {
        console.log('출석 상태 업데이트 성공:', data);
        alert('출석 상태가 성공적으로 저장되었습니다.');
    })
    .catch(error => {
        console.error('출석 상태 업데이트 실패:', error);
        alert('출석 상태 저장에 실패했습니다. 오류: ' + error.message);
    });
}



// 서버로 출석 상태를 업데이트하는 함수 (AJAX 또는 Fetch API를 사용할 수 있음)
function updateAttendanceStatus(stuId, weekCd, lectOrder, lectNo, atndCd) {
    // 서버로 출석 상태를 업데이트하는 PUT 요청
	const attendanceVO = {
		stuId: stuId,
        weekCd: weekCd,
		lectNo: lectNo,
        lectOrder: lectOrder,
        atndCd: atndCd,
	};
    fetch(`${contextPath.value}/attendance/attendan/${lectNo}/edit`, {  // URL 경로에서 lectNo를 사용

		method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(attendanceVO)
    })
    .then(response => response.json())
    .then(data => {
        // 서버에서 반환된 결과 처리
        if (data === "출결 정보 업데이트 성공!!!") {
            console.log('출석 상태가 성공적으로 업데이트되었습니다.');
        } else {
            console.log(`출석 상태 업데이트 실패: ${data}`);
        }
    })
    .catch(error => {
        console.error('출석 상태 업데이트 중 오류 발생:', error);
    });
	console.log("@@@@@@@@@@@@@@lectNo:", lectNo);
}













