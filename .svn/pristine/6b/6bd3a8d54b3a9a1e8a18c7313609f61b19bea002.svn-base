package kr.or.ddit.yguniv.lecture.controller;

import java.util.Collection;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.yguniv.lecture.dao.LectureMapper;
import kr.or.ddit.yguniv.lecture.service.LectureServiceImpl;
import kr.or.ddit.yguniv.vo.LectureVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/lecture")
public class LectureController {
	@Autowired
	private LectureMapper mapper;
	@Autowired
	private LectureServiceImpl service;
	
	@ResponseBody
	@GetMapping("my")
	public List<LectureVO> myLectureList(Authentication auth){
		if(auth == null) return null;
		return mapper.myLectureList(auth.getName());
	}
	
	@ResponseBody
	@GetMapping("{semstrNo}")
	public List<LectureVO> selectLectureList(Authentication authentication, @PathVariable String semstrNo) {
		Collection<? extends GrantedAuthority> role = authentication.getAuthorities();
		LectureVO lectureVO = new LectureVO();
		lectureVO.setSemstrNo(semstrNo);
		if(role.contains(new SimpleGrantedAuthority("ROLE_PROFESSOR"))) {
			lectureVO.setProfeId(authentication.getName());
		}
		return service.selectLectureRequestList(lectureVO);
	}
	
	@GetMapping
	public String selectLectureRequestList() {
		return "lecture/lectureRequestList";
	}
	
	@GetMapping("request/{lectNo}")
	public String selectLectureRequest(LectureVO lectureVO, Model model) {
		model.addAttribute("lecture", service.selectLectureRequest(lectureVO));
		return "lecture/lectureRequestDetail";
	}
	
	@GetMapping("request/new")
	public String lectureRequestForm() {
		return "lecture/lectureRequestForm";
	}
	
	@PostMapping("request/new")
	public void InsertLectureRequest() {
		
	}
	
	@GetMapping("request/{lectNo}/edit")
	public String lectureRequestEdit(@PathVariable String lectNo) {
		return "lecture/lectureRequestEdit";
	}
	
	@PutMapping("request/{lectNo}/edit")
	public void updateLectureRequest(@PathVariable String lectNo) {
		
	}
	
	@DeleteMapping("request/{lectNo}")
	public void deleteLectureRequest(@PathVariable String lectNo) {
		
	}
	
	@PutMapping("request/{lectNo}/consent")
	public void consentLectureRequest(@PathVariable String lectNo) {
		
	}
	
	@PutMapping("request/{lectNo}/return")
	public void returnLectureRequest(@PathVariable String lectNo) {
		
	}
	
	@GetMapping("abolition")
	public String selectLectureAbolitionList() {
		return "lecture/lectureAbolitionList";
	}
	
	@PutMapping("{lectNo}/abolition")
	public void updateLectureAbolition(@PathVariable String lectNo) {
		
	}
	
	@DeleteMapping("{lectNo}/abolition")
	public void deleteLectureAbolition(@PathVariable String lectNo) {
		
	}
	
	@PutMapping("{lectNo}/abolition/consent")
	public void consentLectureAbolition(@PathVariable String lectNo) {
		
	}
	
	@PutMapping("{lectNo}/abolition/return")
	public void returnLectureAbolition(@PathVariable String lectNo) {
		
	}
	
	@GetMapping(value = "request/{lectNo}", produces = MediaType.APPLICATION_PDF_VALUE)
	public void selectLecturePDF() {
		
	}
}
