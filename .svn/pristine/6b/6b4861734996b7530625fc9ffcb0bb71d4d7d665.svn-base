package kr.or.ddit.yguniv.assignment.controller;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.yguniv.assignment.service.AssignmentService;
import kr.or.ddit.yguniv.commons.exception.PKNotFoundException;
import kr.or.ddit.yguniv.noticeboard.exception.BoardException;
import kr.or.ddit.yguniv.paging.PaginationInfo;
import kr.or.ddit.yguniv.paging.SimpleCondition;
import kr.or.ddit.yguniv.paging.renderer.BootStrapPaginationRenderer;
import kr.or.ddit.yguniv.paging.renderer.PaginationRenderer;
import kr.or.ddit.yguniv.vo.AssignmentVO;
import kr.or.ddit.yguniv.vo.LectureVO;


/**
 * @author AYS
 * lvn에 ?는 디테일로 갈 수 있게 해당넘버를 붙여줘야함
 */
@Controller
@RequestMapping("/lecture/{lectNo}/assignment")
public class AssignmentController {
	
	public static final String MODELNAME = "assignment";
	
	@Autowired
	private AssignmentService service;
	
	@ModelAttribute
	public void addLecture(@PathVariable String lectNo, Model model) {
		LectureVO lecture = service.checkLecture(lectNo);
		if(lecture == null) {
			throw new PKNotFoundException("해당 강의는 존재하지 않습니다", true);
		}
		model.addAttribute("lecture",lecture);
		model.addAttribute("lectNo",lectNo);
	}
	
	//과제전체조회(검색어 +페이징)
	@GetMapping
	public String selectList(
			@RequestParam(required = false, defaultValue = "1") int page
			, @ModelAttribute("condition") SimpleCondition simpleCondition
			, Model model
			) {
		String lectNo = (String) model.getAttribute("lectNo");
		
		PaginationInfo<AssignmentVO> paging = new PaginationInfo<>();
		paging.setCurrentPage(page);
		paging.setSimpleCondition(simpleCondition);
		model.addAttribute("assignmentList", service.readAssignmentListPaging(paging,lectNo));
		PaginationRenderer renderer = new BootStrapPaginationRenderer();
		
		model.addAttribute("pagingHTML", renderer.renderPagination(paging, "fnPaging"));
		
		return "lecture/materials/assignment/assignmentList";
	}
	//과제 생성폼이동
	@GetMapping("new")
	public String createForm(Model model) {
		String lectNo = (String)model.getAttribute("lectNo");
		if(!model.containsAttribute(MODELNAME)) {
			AssignmentVO assignment = new AssignmentVO();
			assignment.setLectNm(service.checkLecture(lectNo).getLectNm());
			model.addAttribute(MODELNAME, assignment);
		}
		
		return "lecture/materials/assignment/assignmentForm";
	}

	//과제 생성
	@PostMapping()
	public String create(
			@ModelAttribute(MODELNAME) AssignmentVO assignment
			, BindingResult errors
			, RedirectAttributes redirectAttributes
			) {
		
		try {
			String lvn = null;
			if(!errors.hasErrors()) {
				service.createAssignment(assignment);
				lvn = "redirect:/lecture/"+assignment.getLectNo()+"/assignment/"+assignment.getAssigNo();
			}
			else {
				redirectAttributes.addFlashAttribute(MODELNAME, assignment);
				redirectAttributes.addFlashAttribute(BindingResult.MODEL_KEY_PREFIX + MODELNAME, errors);
				lvn = "redirect:/lecture/"+assignment.getLectNo()+"/assignment/new";
			}
			return lvn;
		}catch(Throwable e) {
			throw new BoardException(e);
		}
	}
	
	//과제상세조회
	@GetMapping("{assigNo}")
	public String select(@PathVariable()String assigNo, Model model) {
		
		AssignmentVO assignment = service.readAssignment(assigNo);
		model.addAttribute(MODELNAME,assignment);
		
		return "lecture/materials/assignment/assignmentDetail";
	}
	
	//과제수정폼이동
	@GetMapping("{assigNo}/edit")
	public String updateForm(Model model, @PathVariable()String assigNo) {
		model.addAttribute(MODELNAME, service.readAssignment(assigNo));
		return "lecture/materials/assignment/assignmentEditForm";
	}
	
	
	//과제수정
	@PostMapping("{assigNo}/edit")
	public String update(@PathVariable()String assigNo
			,@Validated @ModelAttribute(MODELNAME) AssignmentVO assignment
			,BindingResult errors
		    ,RedirectAttributes redirectAttributes
			) {
		String lvn =null;
		if(!errors.hasErrors()) {
			try {
				service.modifyAssignment(assignment);
				lvn = "redirect:/lecture/"+assignment.getLectNo()+"/assignment/"+assigNo;
			}catch(BoardException e){
				redirectAttributes.addFlashAttribute(MODELNAME, assignment);
				redirectAttributes.addFlashAttribute("message",e.getMessage());
				lvn = "redirect:/lecture/"+assignment.getLectNo()+"/assignment/"+assigNo;
			}
		}else {
			redirectAttributes.addFlashAttribute(MODELNAME, assignment);
			redirectAttributes.addFlashAttribute(BindingResult.MODEL_KEY_PREFIX + MODELNAME, errors);
			lvn = "redirect:/lecture/"+assignment.getLectNo()+"/assignment/"+assigNo+"/edit";
		}
		assignment.setAtchFile(null);
		return lvn;
	}
	
	//과제삭제
	@PostMapping("{assigNo}/delete")
	public String delete(@PathVariable()String assigNo
			,RedirectAttributes redirectAttributes
			) {
		AssignmentVO assignment = service.readAssignment(assigNo);
		String lectNo=assignment.getLectNo();
		try {
			service.removeAssignment(assigNo);
			return "redirect:/lecture/"+lectNo+"/assignment";
		}catch(BoardException e) {
			redirectAttributes.addFlashAttribute("message", e.getMessage());
			return "redirect:/lecture/"+lectNo+"/assignment/"+assigNo;
		}
		
	}
	
	
}
