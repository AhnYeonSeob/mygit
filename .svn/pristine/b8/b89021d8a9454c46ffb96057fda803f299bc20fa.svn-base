package kr.or.ddit.yguniv.award.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.yguniv.award.service.AwardService;
import kr.or.ddit.yguniv.noticeboard.exception.BoardException;
import kr.or.ddit.yguniv.vo.AwardVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/award")
public class AwardCategoryController {
	
	
	public static final String MODELNAME = "award";
	
	@Autowired
	private AwardService service;
	
	@ModelAttribute(MODELNAME)
	public AwardVO award() {
		return new AwardVO();
	}

	//장학금 목록 조회
	@GetMapping
	public String SelectList(Model model) {
		
		
	
		model.addAttribute("award", service.awardList());
		
		return "award/awardList";
		
	}
	
	//상세 보기 
	@GetMapping("{awardCd}")
	public String select(@PathVariable String awardCd, Model model) {
		
		AwardVO award = service.selectAward(awardCd);
		award.setAwardCd(awardCd);
		
		model.addAttribute("award",award);

		return "award/awardDetail";
	}
	
	
	// 새글 쓰기 
	@GetMapping("insertAward/new")
	public String insertAward(Model model, @ModelAttribute(MODELNAME) AwardVO award) {
		
		model.addAttribute(MODELNAME,award);
		
		return  "award/awardForm";
		
	}
	// 장학금 유형 추가 
	@PostMapping("insertAward")
	public String Award(@ModelAttribute(MODELNAME) AwardVO award,BindingResult errors,
			RedirectAttributes redirectAttributes
			) {
		
		  if (errors.hasErrors()) {
		        // 에러가 있으면 다시 폼으로 이동
		        return "award/awardForm";
		    }
		  // 서비스 계층 호출
		    service.insertAward(award);
		  // 성공적으로 저장한 후 리다이렉트
		    redirectAttributes.addFlashAttribute("message", "장학금이 성공적으로 추가되었습니다.");
		    return "redirect:/award/";
	}
//장학금 유형 수정 폼
	@GetMapping("{awardCd}/edit")
	public String updateAward(@PathVariable String awardCd,Model model,
			@ModelAttribute(MODELNAME) AwardVO award) {
		
		log.info("유정 보드 체크 {}", awardCd);
		model.addAttribute(MODELNAME, service.selectAward(awardCd));
		
		return "award/awardEdit";
	}
	
	//수정
	@PostMapping("{awardCd}/edit")
	public String update(@ModelAttribute(MODELNAME) AwardVO award,
			 BindingResult errors, RedirectAttributes redirectAttributes) {

		 String lvn= null;
			if (!errors.hasErrors()) {
				try {
					service.updateAward(award);
					lvn = "redirect:/award/";
				} catch (BoardException e) {
					redirectAttributes.addFlashAttribute(MODELNAME, award);
					redirectAttributes.addFlashAttribute("message", e.getMessage());
					lvn = "redirect:/award/";
				}
			} else {
				redirectAttributes.addFlashAttribute(MODELNAME, award);
				redirectAttributes.addFlashAttribute(BindingResult.MODEL_KEY_PREFIX, errors);
				return "redirect:/award/{awardCd}/edit";
			}
			
			return lvn;
		
	}
	// 장학금 유형 삭제
	@PostMapping("delete/{awardCd}")
	public String deleteAward(@PathVariable String awardCd, RedirectAttributes redirectAttributes) {
		try {
			
			service.deleteAward(awardCd);
			redirectAttributes.addFlashAttribute("message", "게시글이 삭제되었습니다.");
			
		} catch (Exception e) { 
			redirectAttributes.addFlashAttribute("error", "게시글 삭제 중 오류가 발생했습니다.");
		}

	 return "redirect:/award/";
	}


}
